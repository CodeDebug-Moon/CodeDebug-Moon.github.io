<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>test article</title>
    <url>/2021/02/19/test-article/</url>
    <content><![CDATA[<blockquote>
<p>Hello World! test!20200219</p>
</blockquote>
]]></content>
      <categories>
        <category>Experience</category>
      </categories>
      <tags>
        <tag>Experience</tag>
      </tags>
  </entry>
  <entry>
    <title>工资管理系统</title>
    <url>/2020/03/01/%E5%B7%A5%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>员工工资管理</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>开发一个小型工资管理系统，工资信息包括：员工编号，姓名，基本工资，岗位工资，奖励，应发工资，公积金，扣税，实发工资等。<br>系统功能说明如下：<br>（1）密码验证功能：主要实现登陆密码的验证工作。<br>（2）对数据进行维护，包括数据录入、添加、修改、删除、统计、输出等。<br>（3）对数据进行查询，例如可按照员工编号、姓名等进行查询。<br>（4）可根据每位员工的实发工资，对员工收入做一个排序，了解员工的收入情况。<br>（5）信息统计显示。<br>（6）有关信息保存在文件中。<br>（7）具有退出系统的功能。</p>
</blockquote>
<blockquote>
<p>Source code:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class company&#123;         &#x2F;&#x2F;建立一个类 </span><br><span class="line">	public:</span><br><span class="line">		int num;</span><br><span class="line">		string name;</span><br><span class="line">		int basicwage;  &#x2F;&#x2F;基础工资 </span><br><span class="line">		int postwage;  &#x2F;&#x2F;岗位工资</span><br><span class="line">		int bonus;   &#x2F;&#x2F;奖金</span><br><span class="line">		int salary;  &#x2F;&#x2F;应发工资</span><br><span class="line">		int funds;   &#x2F;&#x2F;公积金 </span><br><span class="line">		float deduthetax; &#x2F;&#x2F;税收 </span><br><span class="line">		float  thp;  &#x2F;&#x2F;实发工资</span><br><span class="line">		company()&#123;&#125;;&#x2F;&#x2F;默认构造函数 </span><br><span class="line">		company(int n,string na,int ba,int po,int bo,int sa,int f,float de,float th):num(n),name(na),basicwage(ba),postwage(po),bonus(bo),salary(sa),funds(f),deduthetax(de),thp(th)&#123;&#125;	  </span><br><span class="line">		void setdata();</span><br><span class="line">	    void display();</span><br><span class="line">&#125;; </span><br><span class="line">&#x2F;&#x2F;逐个字符验证密码 </span><br><span class="line">int cmp(char *g,char *b)&#123;  </span><br><span class="line">		int k;</span><br><span class="line">		for(k&#x3D;0;k&lt;6;k++)&#123;</span><br><span class="line">			if(g[k]!&#x3D;b[k])</span><br><span class="line">			 break;</span><br><span class="line">		&#125;</span><br><span class="line">		if(k&#x3D;&#x3D;6) return 1;</span><br><span class="line">	&#125;</span><br><span class="line">&#x2F;&#x2F;密码验证 </span><br><span class="line">int mmyz()</span><br><span class="line">&#123;</span><br><span class="line">	int i,j;</span><br><span class="line">    int z&#x3D;0;</span><br><span class="line">	char g[6],b[]&#x3D;&#123;&quot;123456&quot;&#125;;&#x2F;&#x2F;设置初始密码 </span><br><span class="line">	cout&lt;&lt;&quot;请输入系统的6位初始密码&quot;&lt;&lt;endl;</span><br><span class="line">	for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	for(j&#x3D;0;j&lt;6;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[j]&#x3D;getch();</span><br><span class="line">		cout&lt;&lt;&quot;*&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	if(cmp(g,b)&#x3D;&#x3D;1)	      &#x2F;&#x2F;调用密码比较函数 </span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;&quot;密码正确&quot;&lt;&lt;endl;</span><br><span class="line">			cout&lt;&lt;&quot;成功进入系统&quot;&lt;&lt;endl;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;endl&lt;&lt;&quot;密码错误，请重新输入&quot;&lt;&lt;endl;</span><br><span class="line">			z++;</span><br><span class="line">		&#125;</span><br><span class="line">		if(z&#x3D;&#x3D;3)</span><br><span class="line">		&#123;</span><br><span class="line">		cout&lt;&lt;&quot;禁止登陆&quot;&lt;&lt;endl;</span><br><span class="line">		break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return(z);</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输入函数 </span><br><span class="line">void company::setdata()&#123;</span><br><span class="line">	cin&gt;&gt;num;</span><br><span class="line">	cin&gt;&gt;name;</span><br><span class="line">	cin&gt;&gt;basicwage;</span><br><span class="line">	cin&gt;&gt;postwage;</span><br><span class="line">	cin&gt;&gt;bonus;</span><br><span class="line">	cin&gt;&gt;salary;</span><br><span class="line">	cin&gt;&gt;funds;</span><br><span class="line">	cin&gt;&gt;deduthetax;</span><br><span class="line">	cin&gt;&gt;thp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出函数 </span><br><span class="line">void company::display()&#123;</span><br><span class="line">	cout&lt;&lt;&quot;工号:&quot;&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;姓名:&quot;&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;基本工资:&quot;&lt;&lt;basicwage&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;岗位工资:&quot;&lt;&lt;postwage&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;奖金:&quot;&lt;&lt;bonus&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;应发工资:&quot;&lt;&lt;salary&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;公积金:&quot;&lt;&lt;funds&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;税收:&quot;&lt;&lt;deduthetax&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;实发工资:&quot;&lt;&lt;thp&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;打印菜单</span><br><span class="line">void menu()&#123;</span><br><span class="line">	cout&lt;&lt;&quot;|--------------------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------1.添加-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------2.修改-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------3.删除-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------4.统计-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------5.查询-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------6.排序-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------7.输出-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------8.菜单-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------9.写入-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|-------0.退出-------|&quot;&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;|--------------------|&quot;&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">&#x2F;&#x2F;添加函数 </span><br><span class="line">void add(company *stu,int &amp;a)&#123;</span><br><span class="line">	int b,i;</span><br><span class="line">	cout&lt;&lt;&quot;请输入插入个数&quot;&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;b; </span><br><span class="line">	cout&lt;&lt;&quot;输入插入数据:&quot;&lt;&lt;endl; </span><br><span class="line">	for(i&#x3D;a;i&lt;a+b;i++)&#123;</span><br><span class="line">	stu[i].setdata();</span><br><span class="line">    &#125;</span><br><span class="line">    a&#x3D;a+b;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;修改函数 </span><br><span class="line">void change(company *stu,int a)&#123;</span><br><span class="line">	int c,i;</span><br><span class="line">	  cout&lt;&lt;&quot;输入要修改的员工编号&quot;&lt;&lt;endl;</span><br><span class="line">	  cin&gt;&gt;c;</span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;c)&#123;</span><br><span class="line">	  		break;</span><br><span class="line">		  &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  if(i&#x3D;&#x3D;a)&#123;</span><br><span class="line">		cout&lt;&lt;&quot;输入的员工编号无效&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	   for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;c)&#123;</span><br><span class="line">	  		cout&lt;&lt;&quot;输入要修改后员工数据&quot;&lt;&lt;endl;</span><br><span class="line">	  		stu[i].setdata();</span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;删除函数 </span><br><span class="line">void delet(company *stu,int &amp;a)&#123;</span><br><span class="line">int d,i;</span><br><span class="line">	  cout&lt;&lt;&quot;输入要删除的员工编号&quot;&lt;&lt;endl;</span><br><span class="line">	  cin&gt;&gt;d; </span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;d)&#123;</span><br><span class="line">	  		break;</span><br><span class="line">		  &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  if(i&#x3D;&#x3D;a)&#123;</span><br><span class="line">		cout&lt;&lt;&quot;输入的员工编号无效&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;d)&#123;</span><br><span class="line">	  		for(;i&lt;a;i++)&#123;</span><br><span class="line">	  			stu[i]&#x3D;stu[i+1];</span><br><span class="line">			  &#125;</span><br><span class="line">			a&#x3D;a-1;  </span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;统计函数 </span><br><span class="line">void sum(company *stu,int a)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int e&#x3D;0;    &#x2F;&#x2F;员工总工资 </span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  e&#x3D;e+stu[i].thp;	</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;&quot;员工总工资为:&quot; &lt;&lt;e&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;查找函数 </span><br><span class="line">void search(company *stu,int a)&#123;</span><br><span class="line">	int f,i;</span><br><span class="line">	  cout&lt;&lt;&quot;输入要查询的员工编号&quot;&lt;&lt;endl;</span><br><span class="line">	  cin&gt;&gt;f; </span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;f)&#123;</span><br><span class="line">	  		break;</span><br><span class="line">		  &#125;</span><br><span class="line">	  &#125;</span><br><span class="line">	  if(i&#x3D;&#x3D;a)&#123;</span><br><span class="line">		cout&lt;&lt;&quot;输入的员工编号无效&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;f)&#123;</span><br><span class="line">	  		stu[i].display();</span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;排序函数 </span><br><span class="line">void sort(company *stu,int a)&#123;</span><br><span class="line">	int i,j;</span><br><span class="line">	company tmp;</span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">		for(j&#x3D;i+1;j&lt;a;j++)&#123;</span><br><span class="line">			if(stu[i].thp&gt;stu[j].thp)&#123;</span><br><span class="line">			     tmp&#x3D;stu[i];</span><br><span class="line">			     stu[i]&#x3D;stu[j];</span><br><span class="line">			     stu[j]&#x3D;tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;&quot;按实发工资排序成功&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;输出函数 </span><br><span class="line">void output(company *stu,int a)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">		stu[i].display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;写入文件 </span><br><span class="line">void save(company *stu,int a)&#123;</span><br><span class="line">	int i&#x3D;0;</span><br><span class="line">	fstream fs;</span><br><span class="line">	fs.open(&quot;f:\\stud.txt&quot;,ios_base::out);</span><br><span class="line">	fs&lt;&lt;&quot;工号    姓 名    基础工资    岗位工资    奖 金    应发工资    公积金    税 收    实发工资    &quot;&lt;&lt;endl;</span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">		fs&lt;&lt;stu[i].num&lt;&lt;&quot;  &quot;&lt;&lt;stu[i].name&lt;&lt;&quot;  &quot;&lt;&lt;stu[i].basicwage&lt;&lt;&quot;          &quot;&lt;&lt;stu[i].postwage&lt;&lt;&quot;         &quot;&lt;&lt;stu[i].bonus&lt;&lt;&quot;    &quot;&lt;&lt;stu[i].salary&lt;&lt;&quot;         &quot;&lt;&lt;stu[i].funds&lt;&lt;&quot;      &quot;&lt;&lt;stu[i].deduthetax&lt;&lt;&quot;    &quot;&lt;&lt;stu[i].thp&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	fs.close();</span><br><span class="line">	cout&lt;&lt;&quot;写入成功&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;* run this program using the console pauser or add your own getch, system(&quot;pause&quot;) or input loop *&#x2F;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line"></span><br><span class="line">	int m;</span><br><span class="line">	m&#x3D;mmyz();</span><br><span class="line">	if(m&#x3D;&#x3D;3)&#123;</span><br><span class="line">		printf(&quot;..........................\n&quot;);</span><br><span class="line">	&#125; </span><br><span class="line">	else&#123;                          &#x2F;&#x2F;当密码正确时 </span><br><span class="line">	int i;</span><br><span class="line">	int n; &#x2F;&#x2F;功能序号 </span><br><span class="line">	int a; &#x2F;&#x2F;输入员工个数 </span><br><span class="line">	company st[100];&#x2F;&#x2F;定义类数组 </span><br><span class="line">	company *stu&#x3D;st;&#x2F;&#x2F;让类指针指向数组首地址 </span><br><span class="line">	cout&lt;&lt;&quot;输入员工个数&quot;&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	cout&lt;&lt;&quot;输入数据(编号，姓名，基本工资，岗位工资，奖励，应发工资，公积金，税收，实发工资)&quot;&lt;&lt;endl; </span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">		stu[i].setdata();</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;                     &#x2F;&#x2F;输入函数 </span><br><span class="line">	menu(); </span><br><span class="line">	int o;</span><br><span class="line">	for(;o!&#x3D;0;)&#123;</span><br><span class="line">		cout&lt;&lt;&quot;|--------------------|&quot;&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;&quot;|-请选择要操作的序号-|&quot;&lt;&lt;endl;</span><br><span class="line">		cin&gt;&gt;o;</span><br><span class="line">		if(o&#x3D;&#x3D;0)&#123;</span><br><span class="line">			cout&lt;&lt;&quot;退出&quot;&lt;&lt;endl;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		else&#123;</span><br><span class="line">			switch(o)</span><br><span class="line">				&#123;</span><br><span class="line">					case 1:add(stu,a);break;</span><br><span class="line">					case 2:change(stu,a);break;</span><br><span class="line">					case 3:delet(stu,a);break;</span><br><span class="line">					case 4:sum(stu,a);break;</span><br><span class="line">					case 5:search(stu,a);break;</span><br><span class="line">					case 6:sort(stu,a);break;</span><br><span class="line">					case 7:output(stu,a);break;</span><br><span class="line">					case 8:menu();break;</span><br><span class="line">					case 9:save(stu,a);break; </span><br><span class="line">				&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>单链表就地置换</title>
    <url>/2020/03/01/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%B0%B1%E5%9C%B0%E7%BD%AE%E6%8D%A2/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;malloc.h&gt;</span><br><span class="line">typedef struct node&#123; </span><br><span class="line">	int data;</span><br><span class="line">	struct node *next;</span><br><span class="line">&#125;node,*Lnode;</span><br><span class="line">Lnode  creat()&#123;&#x2F;&#x2F;对链表赋值 </span><br><span class="line">	Lnode head,p,q;</span><br><span class="line">	head&#x3D;(node*)malloc(sizeof(node));</span><br><span class="line">	q&#x3D;head;</span><br><span class="line">	char c;</span><br><span class="line">	c&#x3D;&#39;,&#39;;</span><br><span class="line">	printf(&quot;input data：\n&quot;);</span><br><span class="line">    while(c!&#x3D;&#39;.&#39;)&#123;</span><br><span class="line">		int a;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;a);</span><br><span class="line">	    p&#x3D;(node*)malloc(sizeof(node));</span><br><span class="line">		p-&gt;data&#x3D;a;</span><br><span class="line">		q-&gt;next&#x3D;p;&#x2F;&#x2F;连接下一个链表 </span><br><span class="line">		q&#x3D;p;&#x2F;&#x2F;指向最新的链表 </span><br><span class="line">		c&#x3D;getchar();&#x2F;&#x2F;输入.结束 </span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	p-&gt;next&#x3D;NULL;&#x2F;&#x2F;最后一个指针指向空 </span><br><span class="line">	return head;&#x2F;&#x2F;返回头指针 </span><br><span class="line">&#125;</span><br><span class="line">void exchange(Lnode n)&#123;&#x2F;&#x2F;对单链表就地逆置 </span><br><span class="line">	Lnode p,s,t;</span><br><span class="line">	p&#x3D;n;&#x2F;&#x2F;让p指向头指针 </span><br><span class="line">	s&#x3D;p-&gt;next;&#x2F;&#x2F;让s指向p1 </span><br><span class="line">	while(s-&gt;next!&#x3D;NULL)&#123;&#x2F;&#x2F;当s指向最后一个，为空时结束循环 </span><br><span class="line">		t&#x3D;s-&gt;next;&#x2F;&#x2F;让t指向p2 </span><br><span class="line">		s-&gt;next&#x3D;p;&#x2F;&#x2F;把p1放到头指针前面 </span><br><span class="line">		p&#x3D;s;&#x2F;&#x2F;让p指向新链表第一个结点 </span><br><span class="line">		s&#x3D;t;&#x2F;&#x2F;此时s和t同时指向p2 </span><br><span class="line">	&#125;&#x2F;&#x2F;p1放到头指针之前，第一次循环结束 </span><br><span class="line">	s-&gt;next&#x3D;p; &#x2F;&#x2F;最后一个结点，放到最前面 </span><br><span class="line">    n-&gt;next-&gt;next&#x3D;NULL;&#x2F;&#x2F;头指针的下一个是指向p1,逆向后是最后一个。让p1的next指向空 </span><br><span class="line">    n-&gt;next&#x3D;s;&#x2F;&#x2F;让头指针指向新链表的最前端 </span><br><span class="line">&#125;</span><br><span class="line">void print(node *n)&#123;&#x2F;&#x2F;输出链表 </span><br><span class="line">	 printf(&quot;print:\n &quot;);</span><br><span class="line">    n&#x3D;n-&gt;next;&#x2F;&#x2F;从新的p1开始输出 </span><br><span class="line">    while(n!&#x3D;NULL)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%d &quot;,n-&gt;data);</span><br><span class="line">        n&#x3D;n-&gt;next;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	node *n;</span><br><span class="line">	n&#x3D;creat();</span><br><span class="line">	exchange(n);</span><br><span class="line">	print(n);</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>二叉树的遍历</title>
    <url>/2020/03/01/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>功能： 二叉树的建立，二叉树的先序，中序，后序的递归遍历和非递归遍历的两种实现方法。<br>二叉树的层次遍历以及一般树的建立，一般树转换成二叉树的方法。<br>先序，后序的递归遍历与非递归遍历的两种实现方法，树的层次遍历方法。<br>树的先序与后序遍历建立在树的建立方法（使用数组的形式建立各个结点，先序建树，用count记录节点位置）的基础上</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">typedef struct treenode      &#x2F;&#x2F;树的节点</span><br><span class="line">&#123;</span><br><span class="line">    char data ;</span><br><span class="line">    treenode * leftchild, * rightchild ;</span><br><span class="line">&#125;TreeNode;</span><br><span class="line"></span><br><span class="line">typedef TreeNode * StackElemType ;   &#x2F;&#x2F;定义栈包含的数据类型</span><br><span class="line"></span><br><span class="line">typedef struct stacknode    &#x2F;&#x2F;栈的节点</span><br><span class="line">&#123;</span><br><span class="line">    StackElemType data ;</span><br><span class="line">    stacknode * next ;</span><br><span class="line">&#125;StackNode;</span><br><span class="line"></span><br><span class="line">typedef TreeNode * QueueElemType ;     &#x2F;&#x2F;定义队列包含的数据类型</span><br><span class="line"></span><br><span class="line">typedef struct queuenode     &#x2F;&#x2F;定义队列节点</span><br><span class="line">&#123;</span><br><span class="line">    QueueElemType  data ;</span><br><span class="line">    struct queuenode * next ;</span><br><span class="line">&#125;QueueNode;</span><br><span class="line"></span><br><span class="line">typedef struct queuehead    &#x2F;&#x2F;定义队列的头节点</span><br><span class="line">&#123;</span><br><span class="line">    QueueNode * front, * rear ;</span><br><span class="line">&#125;QueueHead;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;stack的有关声明</span><br><span class="line">StackNode * InitStack(StackNode * S) ;</span><br><span class="line">void StackPush(StackNode * S, StackElemType data) ;</span><br><span class="line">void StackPop(StackNode * S, StackElemType &amp; data) ;</span><br><span class="line">int StackEmpty(StackNode * S) ;</span><br><span class="line">int StackGetTop(StackNode * S, StackElemType &amp; data) ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;queue的有关声明</span><br><span class="line">QueueHead * InitQueue(QueueHead * Q) ;</span><br><span class="line">void QueuePush(QueueHead * Q, QueueElemType data) ;</span><br><span class="line">void QueuePop(QueueHead * Q, QueueElemType &amp; data) ;</span><br><span class="line">int QueueEmpty(QueueHead * Q) ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;TreeTraverse的有关声明</span><br><span class="line">TreeNode * InitTree(TreeNode * T) ;</span><br><span class="line">void PreTraverseTree1(TreeNode * T) ;</span><br><span class="line">void PreTraverseTree2(TreeNode * T) ;</span><br><span class="line">void InOrderTraverseTree1(TreeNode * T) ;</span><br><span class="line">void InOrderTraverseTree2(TreeNode * T) ;</span><br><span class="line">void LastTraverseTree1(TreeNode * T) ;</span><br><span class="line">void LastTraverseTree2(TreeNode * T) ;</span><br><span class="line">void LevelTraverseTree(TreeNode * T) ;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;栈的函数定义</span><br><span class="line">StackNode * InitStack(StackNode * S)</span><br><span class="line">&#123;</span><br><span class="line">    S &#x3D; (StackNode *)malloc(sizeof(StackNode)) ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; S)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;内存不足，不能分配栈！\n&quot;) ;</span><br><span class="line">        exit(0) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    S-&gt;next &#x3D; NULL ;</span><br><span class="line">    return(S) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StackPush(StackNode * S, StackElemType data)</span><br><span class="line">&#123;</span><br><span class="line">    StackNode * q ;</span><br><span class="line">    q &#x3D; (StackNode *)malloc(sizeof(StackNode)) ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; q)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;内存不足，不能分配栈！\n&quot;) ;</span><br><span class="line">        exit(0) ;</span><br><span class="line">    &#125;</span><br><span class="line">    q-&gt;data &#x3D; data ;</span><br><span class="line">    q-&gt;next &#x3D; S-&gt;next ;</span><br><span class="line">    S-&gt;next &#x3D; q ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void StackPop(StackNode * S, StackElemType &amp; data)</span><br><span class="line">&#123;</span><br><span class="line">    StackNode * q ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; S-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;栈为空，无返回值！\n&quot;) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q &#x3D; S-&gt;next ;</span><br><span class="line">    data &#x3D; q-&gt;data ;</span><br><span class="line">    S-&gt;next &#x3D; q-&gt;next ;</span><br><span class="line">    free(q) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int StackEmpty(StackNode * S)</span><br><span class="line">&#123;</span><br><span class="line">    if(NULL &#x3D;&#x3D; S-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        return(1) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return(0) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int StackGetTop(StackNode * S, StackElemType &amp; data)</span><br><span class="line">&#123;</span><br><span class="line">    if(NULL !&#x3D; S-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        data &#x3D; S-&gt;next-&gt;data ;</span><br><span class="line">        return(1) ;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        &#x2F;&#x2F;data &#x3D; NULL ;</span><br><span class="line">        return(0) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;队列函数的定义</span><br><span class="line">QueueHead * InitQueue(QueueHead * Q)</span><br><span class="line">&#123;</span><br><span class="line">    QueueNode * q ;</span><br><span class="line">    Q &#x3D; (QueueHead *)malloc(sizeof(QueueHead)) ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; Q)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;内存不足！\n&quot;) ;</span><br><span class="line">        exit(0) ;</span><br><span class="line">    &#125;</span><br><span class="line">    q &#x3D; (QueueNode *)malloc(sizeof(QueueNode)) ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; q)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;内存不足！\n&quot;) ;</span><br><span class="line">        exit(0) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q-&gt;next &#x3D; NULL ;</span><br><span class="line">    Q-&gt;front &#x3D; q ;</span><br><span class="line">    Q-&gt;rear &#x3D; q ;</span><br><span class="line"></span><br><span class="line">    return(Q) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void QueuePush(QueueHead * Q, QueueElemType data)</span><br><span class="line">&#123;</span><br><span class="line">    QueueNode * q ;</span><br><span class="line">    q &#x3D; (QueueNode *)malloc(sizeof(QueueNode)) ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; q)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;内存不足！\n&quot;) ;</span><br><span class="line">        exit(0) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q-&gt;data &#x3D; data ;</span><br><span class="line">    q-&gt;next &#x3D; Q-&gt;rear-&gt;next ;</span><br><span class="line">    Q-&gt;rear-&gt;next &#x3D; q ;</span><br><span class="line">    Q-&gt;rear &#x3D; q ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void QueuePop(QueueHead * Q, QueueElemType &amp; data)</span><br><span class="line">&#123;</span><br><span class="line">    QueueNode * q ;</span><br><span class="line">    if(Q-&gt;front &#x3D;&#x3D; Q-&gt;rear)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;队列为空！\n&quot;) ;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    q &#x3D; Q-&gt;front-&gt;next ;</span><br><span class="line">    data &#x3D; q-&gt;data ;</span><br><span class="line">    Q-&gt;front-&gt;next &#x3D; q-&gt;next ;</span><br><span class="line">    if(Q-&gt;rear &#x3D;&#x3D; q)</span><br><span class="line">        Q-&gt;rear &#x3D; Q-&gt;front ;</span><br><span class="line"></span><br><span class="line">    free(q) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int QueueEmpty(QueueHead * Q)</span><br><span class="line">&#123;</span><br><span class="line">    if(Q-&gt;front &#x3D;&#x3D; Q-&gt;rear)</span><br><span class="line">        return(1) ;</span><br><span class="line">    else</span><br><span class="line">        return(0) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;树的各种遍历函数定义</span><br><span class="line"></span><br><span class="line">&#x2F;*建立一棵二叉树*&#x2F;</span><br><span class="line">TreeNode * InitTree(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    char data ;</span><br><span class="line">    scanf(&quot;%c&quot;, &amp;data) ;</span><br><span class="line"></span><br><span class="line">    if(&#39;#&#39; &#x3D;&#x3D; data)</span><br><span class="line">    &#123;</span><br><span class="line">        T &#x3D; NULL ;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        T &#x3D; (TreeNode *)malloc(sizeof(TreeNode)) ;</span><br><span class="line">        T-&gt;data &#x3D; data ;</span><br><span class="line">        T-&gt;leftchild &#x3D; InitTree(T-&gt;leftchild) ;</span><br><span class="line">        T-&gt;rightchild &#x3D; InitTree(T-&gt;rightchild) ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return(T) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*二叉树递归先序遍历*&#x2F;</span><br><span class="line">void PreTraverseTree1(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;%c  &quot;, T-&gt;data) ;</span><br><span class="line">        PreTraverseTree1(T-&gt;leftchild) ;</span><br><span class="line">        PreTraverseTree1(T-&gt;rightchild) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*二叉树的非递归先序遍历*&#x2F;</span><br><span class="line">void PreTraverseTree2(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    StackNode * S ;</span><br><span class="line">    TreeNode * p ;</span><br><span class="line">    S &#x3D; NULL ;</span><br><span class="line">    p &#x3D; T ;</span><br><span class="line">    S &#x3D; InitStack(S) ;</span><br><span class="line"></span><br><span class="line">    if(NULL &#x3D;&#x3D; p)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;树为空！\n&quot;) ;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(p || !StackEmpty(S))</span><br><span class="line">    &#123;</span><br><span class="line">        if(p)</span><br><span class="line">        &#123;</span><br><span class="line">            StackPush(S, p) ;</span><br><span class="line">            printf(&quot;%c  &quot;, p-&gt;data) ;</span><br><span class="line">            p &#x3D; p-&gt;leftchild ;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            StackPop(S, p) ;</span><br><span class="line">            p &#x3D; p-&gt;rightchild ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    free(S) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*二叉树递归中序遍历*&#x2F;</span><br><span class="line">void InOrderTraverseTree1(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T)</span><br><span class="line">    &#123;</span><br><span class="line">        InOrderTraverseTree1(T-&gt;leftchild) ;</span><br><span class="line">        printf(&quot;%c  &quot;, T-&gt;data) ;</span><br><span class="line">        InOrderTraverseTree1(T-&gt;rightchild) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*二叉树的非递归中序遍历*&#x2F;</span><br><span class="line">void InOrderTraverseTree2(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    StackNode * S ;</span><br><span class="line">    TreeNode * p ;</span><br><span class="line">    S &#x3D; NULL ;</span><br><span class="line">    p &#x3D; T ;</span><br><span class="line">    S &#x3D; InitStack(S) ;</span><br><span class="line"></span><br><span class="line">    if(NULL &#x3D;&#x3D; p)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;树为空！\n&quot;) ;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    while(p || !StackEmpty(S))</span><br><span class="line">    &#123;</span><br><span class="line">        if(p)</span><br><span class="line">        &#123;</span><br><span class="line">            StackPush(S, p) ;</span><br><span class="line">            p &#x3D; p-&gt;leftchild ;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            StackPop(S, p) ;</span><br><span class="line">            printf(&quot;%c  &quot;, p-&gt;data) ;</span><br><span class="line">            p &#x3D; p-&gt;rightchild ;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(S) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*二叉树递归后序遍历*&#x2F;</span><br><span class="line">void LastTraverseTree1(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    if(T)</span><br><span class="line">    &#123;</span><br><span class="line">        LastTraverseTree1(T-&gt;leftchild) ;</span><br><span class="line">        LastTraverseTree1(T-&gt;rightchild) ;</span><br><span class="line">        printf(&quot;%c  &quot;, T-&gt;data) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*二叉树非递归后序遍历*&#x2F;</span><br><span class="line">void LastTraverseTree2(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    StackNode * S ;</span><br><span class="line">    TreeNode * cur, * pre ;</span><br><span class="line">    S &#x3D; NULL ;</span><br><span class="line">    S &#x3D; InitStack(S) ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; T)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;树为空！\n&quot;) ;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pre &#x3D; NULL ;    cur &#x3D; NULL ;</span><br><span class="line">    StackPush(S,T) ;</span><br><span class="line">    while(!StackEmpty(S))</span><br><span class="line">    &#123;</span><br><span class="line">        cur &#x3D; NULL ;</span><br><span class="line">        StackGetTop(S,cur) ;</span><br><span class="line">        if((cur-&gt;leftchild &#x3D;&#x3D; NULL &amp;&amp; cur-&gt;rightchild &#x3D;&#x3D; NULL) || (pre !&#x3D; NULL &amp;&amp; (pre &#x3D;&#x3D; cur-&gt;leftchild ||pre &#x3D;&#x3D; cur-&gt;rightchild)))</span><br><span class="line">        &#123;</span><br><span class="line">            printf(&quot;%c  &quot;, cur-&gt;data) ;</span><br><span class="line">            pre &#x3D; cur ;</span><br><span class="line">            StackPop(S,cur) ;</span><br><span class="line">        &#125;</span><br><span class="line">        else</span><br><span class="line">        &#123;</span><br><span class="line">            if(cur-&gt;rightchild !&#x3D; NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                StackPush(S,cur-&gt;rightchild) ;</span><br><span class="line">            &#125;</span><br><span class="line">            if(cur-&gt;leftchild !&#x3D; NULL)</span><br><span class="line">            &#123;</span><br><span class="line">                StackPush(S,cur-&gt;leftchild) ;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    free(S) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;*二叉树层次遍历*&#x2F;</span><br><span class="line">void LevelTraverseTree(TreeNode * T)</span><br><span class="line">&#123;</span><br><span class="line">    QueueHead * Q ;</span><br><span class="line">    TreeNode * p ;</span><br><span class="line">    Q &#x3D; NULL ;    p &#x3D; T ;</span><br><span class="line">    Q &#x3D; InitQueue(Q) ;</span><br><span class="line">    if(NULL &#x3D;&#x3D; p)</span><br><span class="line">    &#123;</span><br><span class="line">        printf(&quot;树为空！\n&quot;) ;</span><br><span class="line">        return ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    QueuePush(Q,p) ;</span><br><span class="line">    while(!QueueEmpty(Q))</span><br><span class="line">    &#123;</span><br><span class="line">        p &#x3D; NULL ;</span><br><span class="line">        QueuePop(Q,p) ;</span><br><span class="line"></span><br><span class="line">        if(NULL !&#x3D; p-&gt;leftchild)</span><br><span class="line">            QueuePush(Q,p-&gt;leftchild) ;</span><br><span class="line"></span><br><span class="line">        if(NULL !&#x3D; p-&gt;rightchild)</span><br><span class="line">            QueuePush(Q,p-&gt;rightchild) ;</span><br><span class="line"></span><br><span class="line">        printf(&quot;%c  &quot;, p-&gt;data) ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;主函数的定义</span><br><span class="line">void Tips()</span><br><span class="line">&#123;</span><br><span class="line">    printf(&quot;建立树是按照先序遍历来建立树的，并且输入‘#’表示子树为空。\n&quot;) ;</span><br><span class="line">    printf(&quot;请输入要建立的树：&quot;) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">    TreeNode * T ;</span><br><span class="line">    T &#x3D; NULL ;</span><br><span class="line"></span><br><span class="line">    Tips() ;</span><br><span class="line"></span><br><span class="line">    T &#x3D; InitTree(T) ;</span><br><span class="line"></span><br><span class="line">    printf(&quot;二叉树递归先序遍历\n&quot;) ;</span><br><span class="line">    PreTraverseTree1(T) ;</span><br><span class="line">    printf(&quot;\n&quot;) ;</span><br><span class="line"></span><br><span class="line">    printf(&quot;二叉树非递归先序遍历\n&quot;) ;</span><br><span class="line">    PreTraverseTree2(T) ;</span><br><span class="line">    printf(&quot;\n&quot;) ;</span><br><span class="line"></span><br><span class="line">    printf(&quot;二叉树递归中序遍历\n&quot;) ;</span><br><span class="line">    InOrderTraverseTree1(T) ;</span><br><span class="line">    printf(&quot;\n&quot;) ;</span><br><span class="line"></span><br><span class="line">    printf(&quot;二叉树非递归中序遍历\n&quot;) ;</span><br><span class="line">    InOrderTraverseTree2(T) ;</span><br><span class="line">    printf(&quot;\n&quot;) ;</span><br><span class="line"></span><br><span class="line">    printf(&quot;二叉树递归后序遍历\n&quot;) ;</span><br><span class="line">    LastTraverseTree1(T) ;</span><br><span class="line">    printf(&quot;\n&quot;) ;</span><br><span class="line"></span><br><span class="line">    printf(&quot;二叉树非递归后序遍历\n&quot;) ;</span><br><span class="line">    LastTraverseTree2(T) ;</span><br><span class="line">    printf(&quot;\n&quot;) ;</span><br><span class="line"></span><br><span class="line">    printf(&quot;二叉树层次遍历\n&quot;) ;</span><br><span class="line">    LevelTraverseTree(T) ;</span><br><span class="line">    printf(&quot;\n&quot;) ;</span><br><span class="line"></span><br><span class="line">    return 0 ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>树的遍历</title>
    <url>/2020/03/01/%E6%A0%91%E7%9A%84%E9%81%8D%E5%8E%86/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;malloc.h&gt;</span><br><span class="line"></span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">#define MAX_TREE_SIZE 100 </span><br><span class="line">typedef struct&#123;</span><br><span class="line"></span><br><span class="line">int data;</span><br><span class="line"></span><br><span class="line">int parent; &#x2F;&#x2F;双亲位置域</span><br><span class="line"></span><br><span class="line">&#125;PTNode;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*双亲表示法树结构*&#x2F;</span><br><span class="line"></span><br><span class="line">typedef struct &#123;</span><br><span class="line"></span><br><span class="line">PTNode node[MAX_TREE_SIZE];</span><br><span class="line"></span><br><span class="line">int count; &#x2F;&#x2F;根的位置和节点个数</span><br><span class="line"></span><br><span class="line">&#125;PTree;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*树的孩子兄弟表示结点结构定义*&#x2F;</span><br><span class="line"></span><br><span class="line">typedef struct node&#123;</span><br><span class="line"></span><br><span class="line">int data;</span><br><span class="line"></span><br><span class="line">struct node *firstchild;</span><br><span class="line"></span><br><span class="line">struct node *rightsib; &#125;BTNode,*BTree;</span><br><span class="line"></span><br><span class="line">void init_ptree(PTree *tree) &#123;</span><br><span class="line"></span><br><span class="line">tree-&gt;count&#x3D;-1;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;初始化树结点(孩子兄弟表示法)</span><br><span class="line"></span><br><span class="line">BTNode GetTreeNode(int x) &#123;</span><br><span class="line"></span><br><span class="line">BTNode t;</span><br><span class="line"></span><br><span class="line">t.data&#x3D;x;</span><br><span class="line"></span><br><span class="line">t.firstchild&#x3D;t.rightsib&#x3D;NULL;</span><br><span class="line"></span><br><span class="line">return t;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;树的前序遍历(递归)</span><br><span class="line"></span><br><span class="line">void preorder(BTNode *T) &#123;</span><br><span class="line"></span><br><span class="line">if(T!&#x3D;NULL)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;,T-&gt;data);</span><br><span class="line"></span><br><span class="line">preorder(T-&gt;firstchild);</span><br><span class="line"></span><br><span class="line">preorder(T-&gt;rightsib);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;树的前序遍历(非递归)</span><br><span class="line"></span><br><span class="line">void preorder2(PTree T) &#123;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">for(i&#x3D;0;i&lt;T.count;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;,T.node[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;树后序遍历(递归)</span><br><span class="line"></span><br><span class="line">void inoeder(BTNode *T) &#123;</span><br><span class="line"></span><br><span class="line">if(T!&#x3D;NULL)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">inoeder(T-&gt;firstchild);</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;,T-&gt;data);</span><br><span class="line"></span><br><span class="line">inoeder(T-&gt;rightsib);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;树后序遍历(非递归)</span><br><span class="line"></span><br><span class="line">void inoeder2(PTree T) &#123;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">for(i&#x3D;T.count-1;i&gt;&#x3D;0;i--)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d&quot;,T.node[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;层次遍历</span><br><span class="line"></span><br><span class="line">void level(PTree T) &#123;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">for(i&#x3D;0;i&lt;T.count;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;%d &quot;,T.node[i]);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;水平输出二叉树</span><br><span class="line"></span><br><span class="line">void PrintBTree(BTNode *root,int level)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">if(root!&#x3D;NULL)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">PrintBTree(root-&gt;rightsib,level+1);</span><br><span class="line"></span><br><span class="line">for(i&#x3D;1;i&lt;&#x3D;8*level;i++)</span><br><span class="line"></span><br><span class="line">printf(&quot; &quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;-------%d\n&quot;,root-&gt;data);</span><br><span class="line"></span><br><span class="line">PrintBTree(root-&gt;firstchild,level+1);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;输出树</span><br><span class="line"></span><br><span class="line">void print_ptree(PTree tree) &#123;</span><br><span class="line"></span><br><span class="line">int i;</span><br><span class="line"></span><br><span class="line">printf(&quot; 序号 结点 双亲\n&quot;);</span><br><span class="line"></span><br><span class="line">for(i&#x3D;0;i&lt;&#x3D;tree.count;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;%8d%8d%8d&quot;,i,tree.node[i].data,tree.node[i].parent);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*用双亲表示法创建树*&#x2F;</span><br><span class="line"></span><br><span class="line">PTree CreatTree(PTree T) &#123;</span><br><span class="line"></span><br><span class="line">int i&#x3D;1;</span><br><span class="line"></span><br><span class="line">int fa,ch;</span><br><span class="line"></span><br><span class="line">PTNode p;</span><br><span class="line"></span><br><span class="line">for(i&#x3D;1;ch!&#x3D;-1;i++)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;输入第%d结点:\n&quot;,i);</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d,%d&quot;,&amp;fa,&amp;ch);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">p.data&#x3D;ch;</span><br><span class="line">p.parent&#x3D;fa;</span><br><span class="line"></span><br><span class="line">T.count++;</span><br><span class="line"></span><br><span class="line">T.node[T.count].data &#x3D; p.data;</span><br><span class="line"></span><br><span class="line">T.node[T.count].parent &#x3D; p.parent;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;创建的树具体情况如下:\n&quot;);</span><br><span class="line"></span><br><span class="line">print_ptree(T);</span><br><span class="line"></span><br><span class="line">return T;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*一般树转换成二叉树*&#x2F;</span><br><span class="line"></span><br><span class="line">BTNode *change(PTree T)&#123;</span><br><span class="line">int i,j&#x3D;0;</span><br><span class="line">BTNode p[MAX_TREE_SIZE];</span><br><span class="line">BTNode *ip,*is,*ir,*Tree;</span><br><span class="line">ip&#x3D;(BTNode *)malloc(sizeof(BTNode));</span><br><span class="line">is&#x3D;(BTNode *)malloc(sizeof(BTNode));</span><br><span class="line">ir&#x3D;(BTNode *)malloc(sizeof(BTNode));</span><br><span class="line">Tree&#x3D;(BTNode *)malloc(sizeof(BTNode));</span><br><span class="line">for(i&#x3D;0;i&lt;T.count;i++)&#123;</span><br><span class="line">p[i]&#x3D;GetTreeNode(T.node[i].data);</span><br><span class="line">&#125;</span><br><span class="line">for(i&#x3D;1;i&lt;T.count;i++)&#123;</span><br><span class="line">ip&#x3D;&amp;p[i];</span><br><span class="line">is&#x3D;&amp;p[j];</span><br><span class="line">while(T.node[i].parent!&#x3D;is-&gt;data)&#123;</span><br><span class="line">j++;</span><br><span class="line">is&#x3D;&amp;p[j];</span><br><span class="line">&#125;</span><br><span class="line">if(!(is-&gt;firstchild))&#123;</span><br><span class="line">is-&gt;firstchild&#x3D;ip;</span><br><span class="line">ir&#x3D;ip;</span><br><span class="line">&#125;else</span><br><span class="line">&#123;</span><br><span class="line">ir-&gt;rightsib&#x3D;ip;</span><br><span class="line">ir&#x3D;ip;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line">Tree&#x3D;&amp;p[0];</span><br><span class="line">return Tree;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*主菜单*&#x2F;</span><br><span class="line"></span><br><span class="line">void Menu()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;主菜单&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***输入1-------------以双亲法创建一棵一般树***\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***输入2-------------树的前序遍历(递归)*******\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***输入3-------------树的后序遍历(递归)*******\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***输入4-------------树的前序遍历(非递归)*****\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***输入5-------------树的后序遍历(非递归)*****\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***输入6-------------层次序的非递归遍历*******\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***输入0-------------退出程序*****************\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;请输入执行的指令:&quot;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*副菜单*&#x2F;</span><br><span class="line"></span><br><span class="line">void Menu2()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">printf(&quot;*****************副菜单*******************\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***9-------------返回主菜单继续操作*******\n&quot;);</span><br><span class="line"></span><br><span class="line">printf(&quot;***0-------------退出程序*****************\n&quot;); &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#x2F;*主函数*&#x2F;</span><br><span class="line"></span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line">int i&#x3D;0,c1,c2;</span><br><span class="line"></span><br><span class="line">PTree T;</span><br><span class="line"></span><br><span class="line">BTNode *Tree;</span><br><span class="line"></span><br><span class="line">init_ptree(&amp;T);</span><br><span class="line"></span><br><span class="line">loop:</span><br><span class="line"></span><br><span class="line">Menu();</span><br><span class="line"></span><br><span class="line">scanf(&quot;%d&quot;,&amp;c1);</span><br><span class="line"></span><br><span class="line">switch(c1)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">case 1:</span><br><span class="line"></span><br><span class="line">printf(&quot;建立一般树,依次输入各个结点情况:\n&quot;);</span><br><span class="line">printf(&quot;输入结点方式:双亲数据,整型数据(第一个结点双亲数据为-1,最后以-1,-1结束)\n例子:-1,1 1,3\n&quot;);</span><br><span class="line"></span><br><span class="line">T&#x3D;CreatTree(T);</span><br><span class="line"></span><br><span class="line">Tree&#x3D;change(T);</span><br><span class="line"></span><br><span class="line">printf(&quot;一般树转换成二叉树后的情况:\n&quot;);</span><br><span class="line"></span><br><span class="line">PrintBTree(Tree,i);</span><br><span class="line"></span><br><span class="line">getchar();</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case 2:</span><br><span class="line"></span><br><span class="line">printf(&quot;树的前序遍历(递归):\n&quot;);</span><br><span class="line"></span><br><span class="line">preorder(Tree);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case 3:</span><br><span class="line"></span><br><span class="line">printf(&quot;树的后序遍历(递归):\n&quot;);</span><br><span class="line"></span><br><span class="line">inoeder(Tree);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case 4:</span><br><span class="line"></span><br><span class="line">printf(&quot;树的前序遍历(非递归):\n&quot;);</span><br><span class="line"></span><br><span class="line">preorder2(T);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case 5:</span><br><span class="line"></span><br><span class="line">printf(&quot;树的后序遍历(非递归):\n&quot;);</span><br><span class="line"></span><br><span class="line">inoeder2(T);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case 6:</span><br><span class="line"></span><br><span class="line">printf(&quot;树的层次遍历:\n&quot;);</span><br><span class="line"></span><br><span class="line">level(T);</span><br><span class="line"></span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">case 0:</span><br><span class="line"></span><br><span class="line">exit(1);</span><br><span class="line"></span><br><span class="line">break;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Menu2();</span><br><span class="line">scanf(&quot;%d&quot;,&amp;c2);</span><br><span class="line"></span><br><span class="line">if(c2&#x3D;&#x3D;9)</span><br><span class="line"></span><br><span class="line">goto loop;</span><br><span class="line"></span><br><span class="line">else if(c2&#x3D;&#x3D;0)</span><br><span class="line"></span><br><span class="line">exit(1);</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C语言</tag>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>小心心表白</title>
    <url>/2020/03/01/%E5%B0%8F%E5%BF%83%E5%BF%83%E8%A1%A8%E7%99%BD/</url>
    <content><![CDATA[<blockquote>
<p>设置生日密码，验证成功后才可以打开。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>Source code:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line">#include &lt;fstream&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"># include &lt;math.h&gt;</span><br><span class="line"># define U 0.06</span><br><span class="line"># define V 0.025</span><br><span class="line"># define M 1.1</span><br><span class="line"># define N 1.2</span><br><span class="line">&#x2F;&#x2F;逐个字符验证密码 </span><br><span class="line">int cmp(char *g,char *b)&#123;  </span><br><span class="line">		int k;</span><br><span class="line">		for(k&#x3D;0;k&lt;6;k++)&#123;</span><br><span class="line">			if(g[k]!&#x3D;b[k])</span><br><span class="line">			 break;</span><br><span class="line">		&#125;</span><br><span class="line">		if(k&#x3D;&#x3D;6) return 1;</span><br><span class="line">	&#125;</span><br><span class="line">&#x2F;&#x2F;密码验证 </span><br><span class="line">int mmyz()</span><br><span class="line">&#123;</span><br><span class="line">	int i,j;</span><br><span class="line">    int z&#x3D;0;</span><br><span class="line">	char g[6],b[]&#x3D;&#123;&quot;971228&quot;&#125;;&#x2F;&#x2F;设置初始密码 </span><br><span class="line">	cout&lt;&lt;&quot;请输入系统的6位初始密码（密码是你的生日）&quot;&lt;&lt;endl;</span><br><span class="line">	for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	for(j&#x3D;0;j&lt;6;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[j]&#x3D;getch();</span><br><span class="line">		cout&lt;&lt;&quot;*&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	if(cmp(g,b)&#x3D;&#x3D;1)	      &#x2F;&#x2F;调用密码比较函数 </span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;&quot;密码正确&quot;&lt;&lt;endl;</span><br><span class="line">			cout&lt;&lt;&quot;成功进入系统&quot;&lt;&lt;endl;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;endl&lt;&lt;&quot;密码错误，请重新输入&quot;&lt;&lt;endl;</span><br><span class="line">			z++;</span><br><span class="line">		&#125;</span><br><span class="line">		if(z&#x3D;&#x3D;3)</span><br><span class="line">		&#123;</span><br><span class="line">		cout&lt;&lt;&quot;禁止登陆&quot;&lt;&lt;endl;</span><br><span class="line">		break;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return(z);</span><br><span class="line">&#125;</span><br><span class="line">void printxin() &#123;</span><br><span class="line">	float x, y;</span><br><span class="line">    float m, n;</span><br><span class="line">    for ( y&#x3D;2; y&gt;&#x3D;-2; y-&#x3D;U )</span><br><span class="line">    &#123; </span><br><span class="line">        for ( x&#x3D;-1.2; x&lt;&#x3D;1.2; x+&#x3D;V)</span><br><span class="line">        &#123;</span><br><span class="line">            if ( ( ( (x*x + y*y - 1)*(x*x + y*y - 1)*(x*x + y*y - 1) - x*x*y*y*y ) &lt;&#x3D; 0 ) )</span><br><span class="line">                printf(&quot;*&quot;);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">void panduan()&#123;</span><br><span class="line">	int k&#x3D;0;</span><br><span class="line">	char s1[30]&#x3D;&#123;&quot;喜欢&quot;&#125;;</span><br><span class="line">		char s2[30]&#x3D;&#123;&quot;不喜欢&quot;&#125;; </span><br><span class="line">		char s3[30]&#x3D;&#123;&#125;;</span><br><span class="line">		printf(&quot;我这么可爱，你喜不喜欢我！\n&quot;);</span><br><span class="line">		printf(&quot;输入喜欢还是不喜欢！\n&quot;);</span><br><span class="line">		scanf(&quot;%s&quot;,s3); </span><br><span class="line">		if(strcmp(s1,s3)&#x3D;&#x3D;0) &#123;</span><br><span class="line">			float x, y;</span><br><span class="line">    float m, n;</span><br><span class="line">    for ( y&#x3D;2; y&gt;&#x3D;-2; y-&#x3D;U )</span><br><span class="line">    &#123; </span><br><span class="line">        for ( x&#x3D;-1.2; x&lt;&#x3D;1.2; x+&#x3D;V)</span><br><span class="line">        &#123;</span><br><span class="line">            if ( ( ( (x*x + y*y - 1)*(x*x + y*y - 1)*(x*x + y*y - 1) - x*x*y*y*y ) &lt;&#x3D; 0 ) )</span><br><span class="line">                printf(&quot;*&quot;);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot; &quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        printf(&quot;\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    getchar();</span><br><span class="line">    printf(&quot;我也喜欢你！&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		&#x2F;&#x2F;if(strcmp(s2,s3)&#x3D;&#x3D;0) </span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">		panduan();	</span><br><span class="line">		&#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	int m;</span><br><span class="line">	m&#x3D;mmyz();</span><br><span class="line">	if(m&#x3D;&#x3D;3)&#123;</span><br><span class="line">		printf(&quot;..........................\n&quot;);</span><br><span class="line">	&#125; </span><br><span class="line">	else&#123;                          &#x2F;&#x2F;当密码正确时 </span><br><span class="line">	panduan();</span><br><span class="line">	</span><br><span class="line">	</span><br><span class="line">	&#x2F;*int j;</span><br><span class="line">	j&#x3D;panduan();</span><br><span class="line">	if(j&#x3D;&#x3D;0)&#123;</span><br><span class="line">		j&#x3D;panduan();</span><br><span class="line">	&#125;</span><br><span class="line">	if(j&#x3D;&#x3D;1) </span><br><span class="line">	&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;*&#x2F;</span><br><span class="line">   </span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编语言</title>
    <url>/2020/03/01/%E6%B1%87%E7%BC%96%E8%AF%AD%E8%A8%80/</url>
    <content><![CDATA[<blockquote>
<p>使用汇编语言在DOS中显示自己的名字。</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>Source code:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">data segment </span><br><span class="line">car db 255;定义字符图形表</span><br><span class="line">db 05h,122,0,0;李的横</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line"></span><br><span class="line">db 05h,122,-2,-6;shu</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">db 05h,122,0,-7;zuopie</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,-1,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,-1,1</span><br><span class="line">db 05h,122,-1,1</span><br><span class="line"></span><br><span class="line">db 05h,122,0,4;youpie</span><br><span class="line">db 05h,122,1,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,1</span><br><span class="line">db 05h,122,1,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line"></span><br><span class="line">db 05h,122,1,-10;zide le</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,-1,-1</span><br><span class="line"></span><br><span class="line">db 05h,122,-3,-4;zideheng</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line"></span><br><span class="line">db 05h,122,-9,6;jiandezouzhi</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,-6,0</span><br><span class="line">db 05h,122,1,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,1</span><br><span class="line">db 05h,122,1,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,-15,-6;jiandeshu</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,-13,-2</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line"></span><br><span class="line">db 05h,122,-2,-1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line"></span><br><span class="line">db 05h,122,4,-8</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line"></span><br><span class="line">db 05h,122,3,-7</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line"></span><br><span class="line">db 05h,122,-10,5;pengdeyue</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line"></span><br><span class="line">db 05h,122,-14,2</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,-8,-1</span><br><span class="line">db 05h,122,4,0</span><br><span class="line"></span><br><span class="line">db 05h,122,-9,3</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line"></span><br><span class="line">db 05h,122,-14,2</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,0,-1</span><br><span class="line">db 05h,122,-9,0</span><br><span class="line">db 05h,122,4,0</span><br><span class="line"></span><br><span class="line">db 05h,122,-9,5</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,-1,-1</span><br><span class="line"></span><br><span class="line">db 05h,122,-2,0</span><br><span class="line"></span><br><span class="line">db 05h,122,-1,-2</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,0,1</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,0</span><br><span class="line">db 05h,122,1,-1</span><br><span class="line">db 05h,122,-1,-1</span><br><span class="line"></span><br><span class="line">db 05h,122,-2,-1</span><br><span class="line"></span><br><span class="line">char_cnt dw ? </span><br><span class="line">pointer dw ? </span><br><span class="line">line_on db ? </span><br><span class="line">col_on db ? </span><br><span class="line">data ends </span><br><span class="line">stack segment </span><br><span class="line">db 2000 dup (0) </span><br><span class="line">stack ends </span><br><span class="line">code segment </span><br><span class="line">assume cs:code,ds:data </span><br><span class="line">main proc far </span><br><span class="line">push ds </span><br><span class="line">sub ax,ax </span><br><span class="line">push ax </span><br><span class="line">mov ax,data ;初始化 DS </span><br><span class="line">mov ds,ax </span><br><span class="line">mov ah,0 ;设置 300*200 彩色图形方式</span><br><span class="line">mov al,3 </span><br><span class="line">int 10h </span><br><span class="line">mov ah,0bh ;设置背景颜色</span><br><span class="line">mov bh,0 </span><br><span class="line">mov bl,2 </span><br><span class="line">int 10h </span><br><span class="line">mov ah,0bh ;设置彩色调板</span><br><span class="line">mov bh,01 </span><br><span class="line">mov bl,00 </span><br><span class="line">int 10h </span><br><span class="line">call clear_screen ;清屏</span><br><span class="line">lea di,car ;di 指向字符图形表</span><br><span class="line">mov dh,5 ;从第 5 行第 5 列位置开始</span><br><span class="line">mov dl,5 ;显示汽车</span><br><span class="line">call move_shape </span><br><span class="line">mov ah,01h ;从键盘输入字符</span><br><span class="line">int 21h </span><br><span class="line">cmp al,0dh </span><br><span class="line">je exit </span><br><span class="line">exit:mov ah,4ch </span><br><span class="line">int 21h </span><br><span class="line">ret </span><br><span class="line">main endp </span><br><span class="line">clear_screen proc near ;清屏子程序</span><br><span class="line">push ax ;保护寄存器</span><br><span class="line">push bx </span><br><span class="line">push cx </span><br><span class="line">push dx </span><br><span class="line">mov ah,6 ;屏幕上卷功能</span><br><span class="line">mov al,6 </span><br><span class="line">mov ch,0 ;左上角行号</span><br><span class="line">mov cl,0 ;左上角列号</span><br><span class="line">mov dh,250 ;右下角行号</span><br><span class="line">mov dl,250 ;右下角列号</span><br><span class="line">mov bh,7 ;卷入行属性</span><br><span class="line">int 10h ;调用显示功能</span><br><span class="line">pop dx ;恢复寄存器</span><br><span class="line">pop cx </span><br><span class="line">pop bx </span><br><span class="line">pop ax </span><br><span class="line">ret ;返回主程序</span><br><span class="line">clear_screen endp </span><br><span class="line">move_shape proc near </span><br><span class="line">push ax </span><br><span class="line">push bx </span><br><span class="line">push cx </span><br><span class="line">push dx </span><br><span class="line">push di </span><br><span class="line">mov ah,0fh ;取当前显示方式</span><br><span class="line">int 10h </span><br><span class="line">sub ch,ch ;清除寄存器 CX 的高字节</span><br><span class="line">mov cl,[di] ;CL 放循环次数</span><br><span class="line">inc di ;di 指向字符表的第一个字符</span><br><span class="line">mov char_cnt,cx ;保存循环次数</span><br><span class="line">mov pointer,di </span><br><span class="line">mov line_on,dh </span><br><span class="line">mov col_on,dl </span><br><span class="line">plot_next: </span><br><span class="line">add dh,[di+2] ;改变行列指针</span><br><span class="line">add dl,[di+3] </span><br><span class="line">cmp dl,150 ;出屏否？</span><br><span class="line">jb mov_crsr </span><br><span class="line">call erase </span><br><span class="line">pop di </span><br><span class="line">pop dx </span><br><span class="line">pop cx </span><br><span class="line">pop bx </span><br><span class="line">pop ax </span><br><span class="line">ret </span><br><span class="line">mov_crsr: </span><br><span class="line">mov ah,2 ;移动光标位置</span><br><span class="line">int 10h </span><br><span class="line">mov al,[di] </span><br><span class="line">mov bl,[di+1] ;取字符值及属性</span><br><span class="line">push cx </span><br><span class="line">mov cx,1 </span><br><span class="line">mov ah,09 ;显示字符</span><br><span class="line">int 10h </span><br><span class="line">pop cx </span><br><span class="line">add di,4 ;di 指向下一个字符</span><br><span class="line">loop plot_next </span><br><span class="line">call dly_qrtr ;调用延时子程序</span><br><span class="line">call erase ;调用擦除子程序</span><br><span class="line">jmp short plot_next </span><br><span class="line">move_shape endp </span><br><span class="line">erase proc near ;擦除子程序</span><br><span class="line">mov cx,char_cnt </span><br><span class="line">mov di,pointer </span><br><span class="line">mov dh,line_on </span><br><span class="line">mov dl,col_on </span><br><span class="line">erase_next: </span><br><span class="line">add dh,[di+2] </span><br><span class="line">add dl,[di+3] </span><br><span class="line">mov ah,2 </span><br><span class="line">int 10h </span><br><span class="line">mov al,[di] </span><br><span class="line">mov bl,0 </span><br><span class="line">push cx </span><br><span class="line">mov cx,1 </span><br><span class="line">mov ah,9 </span><br><span class="line">int 10h </span><br><span class="line">pop cx </span><br><span class="line">add di,4 </span><br><span class="line">loop erase_next </span><br><span class="line">mov cx,char_cnt </span><br><span class="line">mov di,pointer </span><br><span class="line">mov dh,line_on </span><br><span class="line">inc col_on </span><br><span class="line">mov dl,col_on </span><br><span class="line">ret </span><br><span class="line">erase endp </span><br><span class="line">dly_qrtr proc near ;延时子程序</span><br><span class="line">push cx </span><br><span class="line">push dx </span><br><span class="line">mov dx,50000 </span><br><span class="line">d11:mov cx,8000 </span><br><span class="line">d12:loop d12 </span><br><span class="line">dec dx </span><br><span class="line">jnz d11 </span><br><span class="line">pop dx </span><br><span class="line">pop cx </span><br><span class="line">ret </span><br><span class="line">dly_qrtr endp </span><br><span class="line">code ends </span><br><span class="line">end main</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>汇编语言</tag>
      </tags>
  </entry>
  <entry>
    <title>语法分析器-算符优先</title>
    <url>/2020/03/01/%E8%AF%AD%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>语法分析器功能是输入文法，按照规则判断程序是否是合法的。</p>
</blockquote>
<a id="more"></a>

<blockquote>
<p>Source code:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;math.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;sstream&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;queue&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">#include &lt;map&gt;</span><br><span class="line">#include &lt;bitset&gt;</span><br><span class="line">#pragma comment(linker, &quot;&#x2F;STACK:102400000,102400000&quot;)</span><br><span class="line">typedef long long LL;</span><br><span class="line">const int inf&#x3D;0x3f3f3f3f;</span><br><span class="line">const double pi&#x3D; acos(-1.0);</span><br><span class="line">const double esp&#x3D;1e-6;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">const int Maxn&#x3D;110;</span><br><span class="line">const int maxn&#x3D;20;</span><br><span class="line">char str[maxn][Maxn];&#x2F;&#x2F;输入文法</span><br><span class="line">char st[maxn];&#x2F;&#x2F;输入串</span><br><span class="line">char stac[maxn];&#x2F;&#x2F;模拟栈的数组</span><br><span class="line">char nstr[maxn][maxn];&#x2F;&#x2F;储存转化文法</span><br><span class="line">char mstr[maxn][maxn];</span><br><span class="line">char fin[maxn];&#x2F;&#x2F;存储终结符</span><br><span class="line">char firstvt[maxn][maxn],lastvt[maxn][maxn];</span><br><span class="line">char cmp[maxn][maxn];&#x2F;&#x2F;存储表中的比较符</span><br><span class="line">int firstflag[maxn],lastflag[maxn];&#x2F;&#x2F;非终结符的firstvt,lastvt是否求出</span><br><span class="line">int fcnt[maxn],lcnt[maxn];&#x2F;&#x2F;非终结符firsvt和lastvt的个数</span><br><span class="line">int is_fin(char c) &#123; &#x2F;&#x2F;判断终结符</span><br><span class="line">    for(int i&#x3D;0; fin[i]!&#x3D;&#39;\0&#39;; i++) &#123;</span><br><span class="line">        if(fin[i]&#x3D;&#x3D;c)</span><br><span class="line">            return 1;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">int site(char c) &#123; &#x2F;&#x2F;求在表中的下标</span><br><span class="line">    for(int i&#x3D;0; fin[i]!&#x3D;&#39;\0&#39;; i++) &#123;</span><br><span class="line">        if(fin[i]&#x3D;&#x3D;c)</span><br><span class="line">            return i;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void get_firstvt(char s,int t) &#123; &#x2F;&#x2F;求s非终结符的firstvt值</span><br><span class="line">    int i,j,ii,jj,tt;</span><br><span class="line">    for(i&#x3D;0; i&lt;t; i++) &#123;</span><br><span class="line">        if(str[i][0]&#x3D;&#x3D;s)</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    if(!firstflag[i]) &#123;</span><br><span class="line">        int k&#x3D;fcnt[i];</span><br><span class="line">        for(j&#x3D;0; str[i][j]!&#x3D;&#39;\0&#39;; j++) &#123;</span><br><span class="line">            if(j&#x3D;&#x3D;2||str[i][j]&#x3D;&#x3D;&#39;|&#39;) &#123;</span><br><span class="line">                if(is_fin(str[i][j+1])) &#123;</span><br><span class="line">                    firstvt[i][k++]&#x3D;str[i][j+1];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if(is_fin(str[i][j+2])) &#123;</span><br><span class="line">                        firstvt[i][k++]&#x3D;str[i][j+2];</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(str[i][j+1]!&#x3D;s) &#123;</span><br><span class="line">                        get_firstvt(str[i][j+1],t);</span><br><span class="line">                        for(ii&#x3D;0; ii&lt;t; ii++) &#123;</span><br><span class="line">                            if(str[ii][0]&#x3D;&#x3D;str[i][j+1])</span><br><span class="line">                                break;</span><br><span class="line">                        &#125;</span><br><span class="line">                        for(jj&#x3D;0; jj&lt;fcnt[ii]; jj++) &#123;</span><br><span class="line">                            for(tt&#x3D;0; tt&lt;k; tt++) &#123;</span><br><span class="line">                                if(firstvt[i][tt]&#x3D;&#x3D;firstvt[ii][jj])</span><br><span class="line">                                    break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if(tt&#x3D;&#x3D;k) &#123;</span><br><span class="line">                                firstvt[i][k++]&#x3D;firstvt[ii][jj];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        firstvt[i][k]&#x3D;&#39;\0&#39;;</span><br><span class="line">        fcnt[i]&#x3D;k;</span><br><span class="line">        firstflag[i]&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void output_firstvt(int T) &#123; &#x2F;&#x2F;输出firstvt集</span><br><span class="line">    for(int i&#x3D;0; i&lt;T; i++) &#123;</span><br><span class="line">        get_firstvt(str[i][0],T);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i&#x3D;0; i&lt;T; i++) &#123;</span><br><span class="line">        printf(&quot;Firstvt[%c]:&quot;,str[i][0]);</span><br><span class="line">        for(int j&#x3D;0; j&lt;fcnt[i]; j++) &#123;</span><br><span class="line">            printf(&quot;%c &quot;,firstvt[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        puts(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void get_lastvt(char s,int t) &#123; &#x2F;&#x2F;求s非终结符的lastvt值</span><br><span class="line">    int i,j,ii,jj,tt;</span><br><span class="line">    for(i&#x3D;0; i&lt;t; i++) &#123;</span><br><span class="line">        if(str[i][0]&#x3D;&#x3D;s)</span><br><span class="line">            break;</span><br><span class="line">    &#125;</span><br><span class="line">    if(!lastflag[i]) &#123;</span><br><span class="line">        int k&#x3D;lcnt[i];</span><br><span class="line">        for(j&#x3D;0; str[i][j]!&#x3D;&#39;\0&#39;; j++) &#123;</span><br><span class="line">            if(str[i][j+1]&#x3D;&#x3D;&#39;|&#39;||str[i][j+1]&#x3D;&#x3D;&#39;\0&#39;) &#123;</span><br><span class="line">                if(is_fin(str[i][j])) &#123;</span><br><span class="line">                    lastvt[i][k++]&#x3D;str[i][j];</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    if(is_fin(str[i][j-1])) &#123;</span><br><span class="line">                        lastvt[i][k++]&#x3D;str[i][j-1];</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(str[i][j]!&#x3D;s) &#123;</span><br><span class="line">                        get_lastvt(str[i][j],t);</span><br><span class="line">                        for(ii&#x3D;0; ii&lt;t; ii++) &#123;</span><br><span class="line">                            if(str[ii][0]&#x3D;&#x3D;str[i][j])</span><br><span class="line">                                break;</span><br><span class="line">                        &#125;</span><br><span class="line">                        for(jj&#x3D;0; jj&lt;lcnt[ii]; jj++) &#123;</span><br><span class="line">                            for(tt&#x3D;0; tt&lt;k; tt++) &#123;</span><br><span class="line">                                if(lastvt[i][tt]&#x3D;&#x3D;lastvt[ii][jj])</span><br><span class="line">                                    break;</span><br><span class="line">                            &#125;</span><br><span class="line">                            if(tt&#x3D;&#x3D;k) &#123;</span><br><span class="line">                                lastvt[i][k++]&#x3D;lastvt[ii][jj];</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        lastvt[i][k]&#x3D;&#39;\0&#39;;</span><br><span class="line">        lcnt[i]&#x3D;k;</span><br><span class="line">        lastflag[i]&#x3D;1;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void output_lastvt(int T) &#123; &#x2F;&#x2F;输出lastvt集</span><br><span class="line">    for(int i&#x3D;0; i&lt;T; i++) &#123;</span><br><span class="line">        get_lastvt(str[i][0],T);</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i&#x3D;0; i&lt;T; i++) &#123;</span><br><span class="line">        printf(&quot;Lastvt[%c]:&quot;,str[i][0]);</span><br><span class="line">        for(int j&#x3D;0; j&lt;lcnt[i]; j++) &#123;</span><br><span class="line">            printf(&quot;%c &quot;,lastvt[i][j]);</span><br><span class="line">        &#125;</span><br><span class="line">        puts(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void get_table(int T,int cnt) &#123; &#x2F;&#x2F;得到表</span><br><span class="line">    int x&#x3D;0,y&#x3D;0;</span><br><span class="line">    int i,j,ii,jj;</span><br><span class="line">    for(i&#x3D;0; i&lt;T; i++) &#123;</span><br><span class="line">        for(j&#x3D;0; str[i][j]!&#x3D;&#39;\0&#39;; j++) &#123;</span><br><span class="line">            if(str[i][j]!&#x3D;&#39;|&#39;)</span><br><span class="line">                nstr[x][y++]&#x3D;str[i][j];</span><br><span class="line">            else if(str[i][j]&#x3D;&#x3D;&#39;|&#39;) &#123;</span><br><span class="line">                nstr[x][y]&#x3D;&#39;\0&#39;;</span><br><span class="line">                x++;</span><br><span class="line">                y&#x3D;0;</span><br><span class="line">                nstr[x][y++]&#x3D;str[i][0];</span><br><span class="line">                nstr[x][y++]&#x3D;&#39;-&#39;;</span><br><span class="line">                nstr[x][y++]&#x3D;&#39;&gt;&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        nstr[x][y]&#x3D;&#39;\0&#39;;</span><br><span class="line">        x++;</span><br><span class="line">        y&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;对于S1-&gt;#S#;</span><br><span class="line">    char a&#x3D;&#39;#&#39;;</span><br><span class="line">    cmp[site(a)][site(a)]&#x3D;&#39;&#x3D;&#39;;</span><br><span class="line">    for(i&#x3D;0; i&lt;fcnt[0]; i++) &#123;</span><br><span class="line">        cmp[site(a)][site(firstvt[0][i])]&#x3D;&#39;&lt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0; i&lt;lcnt[0]; i++) &#123;</span><br><span class="line">        cmp[site(lastvt[0][i])][site(a)]&#x3D;&#39;&gt;&#39;;</span><br><span class="line">    &#125;</span><br><span class="line">    &#x2F;&#x2F;对于初始的文法</span><br><span class="line">    for(i&#x3D;0; i&lt;x; i++) &#123;</span><br><span class="line">        for(j&#x3D;3; nstr[i][j+1]!&#x3D;&#39;\0&#39;; j++) &#123;</span><br><span class="line">            if(is_fin(nstr[i][j])&amp;&amp;is_fin(nstr[i][j+1]))</span><br><span class="line">                cmp[site(nstr[i][j])][site(nstr[i][j+1])]&#x3D;&#39;&#x3D;&#39;;</span><br><span class="line">            if(is_fin(nstr[i][j])&amp;&amp;!is_fin(nstr[i][j+1])&amp;&amp;is_fin(nstr[i][j+2])&amp;&amp;nstr[i][j+2]!&#x3D;&#39;\0&#39;)</span><br><span class="line">                cmp[site(nstr[i][j])][site(nstr[i][j+2])]&#x3D;&#39;&#x3D;&#39;;</span><br><span class="line">            if(!is_fin(nstr[i][j])&amp;&amp;is_fin(nstr[i][j+1])) &#123; &#x2F;&#x2F;对于非终结符在终结符之前</span><br><span class="line">                for(ii&#x3D;0; ii&lt;T; ii++) &#123;</span><br><span class="line">                    if(str[ii][0]&#x3D;&#x3D;nstr[i][j])</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">                for(jj&#x3D;0; jj&lt;lcnt[ii]; jj++)</span><br><span class="line">                    cmp[site(lastvt[ii][jj])][site(nstr[i][j+1])]&#x3D;&#39;&gt;&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">            if(is_fin(nstr[i][j])&amp;&amp;!is_fin(nstr[i][j+1])) &#123; &#x2F;&#x2F;对于终结符在非终结符之前</span><br><span class="line">                for(ii&#x3D;0; ii&lt;T; ii++) &#123;</span><br><span class="line">                    if(str[ii][0]&#x3D;&#x3D;nstr[i][j+1])</span><br><span class="line">                        break;</span><br><span class="line">                &#125;</span><br><span class="line">                for(jj&#x3D;0; jj&lt;fcnt[ii]; jj++)</span><br><span class="line">                    cmp[site(nstr[i][j])][site(firstvt[ii][jj])]&#x3D;&#39;&lt;&#39;;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    for(i&#x3D;0; fin[i]!&#x3D;&#39;\0&#39;; i++)</span><br><span class="line">        printf(&quot;\t%c&quot;,fin[i]);</span><br><span class="line">    puts(&quot;&quot;);</span><br><span class="line">    for(i&#x3D;0; i&lt;cnt; i++) &#123;</span><br><span class="line">        printf(&quot;%c\t&quot;,fin[i]);</span><br><span class="line">        for(j&#x3D;0; j&lt;cnt; j++) &#123;</span><br><span class="line">            if(cmp[i][j]!&#x3D;0)</span><br><span class="line">                printf(&quot;%c\t&quot;,cmp[i][j]);</span><br><span class="line">            else</span><br><span class="line">                printf(&quot; \t&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">        puts(&quot;&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">void output(int i,int j,char *str) &#123;</span><br><span class="line">    printf(&quot;\t&quot;);</span><br><span class="line">    for(int ii&#x3D;i; ii&lt;&#x3D;j; ii++)</span><br><span class="line">        printf(&quot;%c&quot;,str[ii]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int isDX(char c)</span><br><span class="line">&#123;</span><br><span class="line">    if(c&gt;&#x3D;&#39;A&#39;&amp;&amp;c&lt;&#x3D;&#39;Z&#39;)</span><br><span class="line">        return 1;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br><span class="line">void exchange()</span><br><span class="line">&#123;</span><br><span class="line">    int ecnt&#x3D;0;</span><br><span class="line">    for(int i&#x3D;0;i&lt;10;i++)&#123;</span><br><span class="line">        int mcnt&#x3D;0;</span><br><span class="line">        for(int j&#x3D;3;nstr[i][j]!&#x3D;&#39;\0&#39;;j++)&#123;</span><br><span class="line">            if(isDX(nstr[i][j])&amp;&amp;strlen(nstr[i])!&#x3D;4)</span><br><span class="line">                mstr[ecnt][mcnt++]&#x3D;&#39;N&#39;;</span><br><span class="line">            else if(!isDX(nstr[i][j]))</span><br><span class="line">                mstr[ecnt][mcnt++]&#x3D;nstr[i][j];</span><br><span class="line">            else&#123;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        mstr[ecnt][mcnt]&#x3D;&#39;\0&#39;;</span><br><span class="line">        if(strlen(mstr[ecnt])!&#x3D;0)</span><br><span class="line">        ecnt++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int get_process(char *st)&#x2F;&#x2F;</span><br><span class="line">&#123;</span><br><span class="line">    exchange();</span><br><span class="line">    int len&#x3D;strlen(st);</span><br><span class="line">    int t&#x3D;0;&#x2F;&#x2F;栈内元素的个数</span><br><span class="line">    int i&#x3D;0,j;</span><br><span class="line">    int bz&#x3D;1;</span><br><span class="line">    stac[0]&#x3D;&#39;#&#39;;</span><br><span class="line">    while(st[i]!&#x3D;&#39;\0&#39;)&#123;</span><br><span class="line">        if(is_fin(stac[t])) j&#x3D;t;</span><br><span class="line">        else j&#x3D;t-1;</span><br><span class="line">        int a&#x3D;site(stac[j]);</span><br><span class="line">        int b&#x3D;site(st[i]);</span><br><span class="line">        if(cmp[a][b]&#x3D;&#x3D;&#39;&lt;&#39;||cmp[a][b]&#x3D;&#x3D;&#39;&#x3D;&#39;)&#123;</span><br><span class="line">            printf(&quot;\t%d&quot;,bz++);</span><br><span class="line">            output(0,t,stac);</span><br><span class="line">            printf(&quot;\t%c&quot;,cmp[a][b]);</span><br><span class="line">            printf(&quot;\t%c&quot;,st[i]);</span><br><span class="line">            output(i+1,len-1,st);</span><br><span class="line">            printf(&quot;\t移进&quot;);</span><br><span class="line">            puts(&quot;&quot;);</span><br><span class="line">            t++;</span><br><span class="line">            stac[t]&#x3D;st[i];</span><br><span class="line">            i++;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(cmp[a][b]&#x3D;&#x3D;&#39;&gt;&#39;)&#123;</span><br><span class="line">            printf(&quot;\t%d&quot;,bz++);</span><br><span class="line">           output(0,t,stac);</span><br><span class="line">            printf(&quot;\t%c&quot;,cmp[a][b]);</span><br><span class="line">            printf(&quot;\t%c&quot;,st[i]);</span><br><span class="line">            output(i+1,len-1,st);</span><br><span class="line">            printf(&quot;\t归约&quot;);</span><br><span class="line">            puts(&quot;&quot;);</span><br><span class="line">            int ii,jj,kk;</span><br><span class="line">            int flag&#x3D;0;</span><br><span class="line">            for(ii&#x3D;t;ii&gt;&#x3D;0;ii--)&#123;</span><br><span class="line">                for(jj&#x3D;0;jj&lt;maxn;jj++)&#123;</span><br><span class="line">                        int lee&#x3D;strlen(mstr[jj]);</span><br><span class="line">                        int kkn&#x3D;0;</span><br><span class="line">                    for(kk&#x3D;lee-1;kk&gt;&#x3D;0;kk--)&#123;</span><br><span class="line">                        if(stac[ii]&#x3D;&#x3D;mstr[jj][kk])&#123;</span><br><span class="line">                            ii--;</span><br><span class="line">                            kkn++;</span><br><span class="line">                        &#125;</span><br><span class="line">                        else</span><br><span class="line">                            break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    if(strlen(mstr[jj])&#x3D;&#x3D;kkn)&#123;</span><br><span class="line">                        t&#x3D;ii+1;</span><br><span class="line">                        stac[t++]&#x3D;&#39;N&#39;;</span><br><span class="line">                        stac[t]&#x3D;&#39;\0&#39;;</span><br><span class="line">                        t--;</span><br><span class="line">                        flag&#x3D;1;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                    else&#123;</span><br><span class="line">                        ii&#x3D;ii+kkn;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                if(!flag)&#123;</span><br><span class="line">                    printf(&quot;\t错误&quot;);</span><br><span class="line">                    return 0;</span><br><span class="line">                &#125;</span><br><span class="line">                else&#123;</span><br><span class="line">                    if(t&#x3D;&#x3D;1&amp;&amp;st[i]&#x3D;&#x3D;&#39;#&#39;)&#123;</span><br><span class="line">                        printf(&quot;\t%d&quot;,bz++);</span><br><span class="line">                        output(0,t,stac);</span><br><span class="line">                        printf(&quot;\t&#x3D;&quot;);</span><br><span class="line">                        printf(&quot;\t%c&quot;,st[i]);</span><br><span class="line">                        output(i+1,len,st);</span><br><span class="line">                        printf(&quot;\t接受&quot;);</span><br><span class="line">                        return 1;</span><br><span class="line">                    &#125;</span><br><span class="line">                    break;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">    int T;</span><br><span class="line">    int cnt&#x3D;0;&#x2F;&#x2F;终结符的个数</span><br><span class="line">    memset(firstflag,0,sizeof(firstflag));</span><br><span class="line">    memset(lastflag,0,sizeof(lastflag));</span><br><span class="line">    memset(cmp,0,sizeof(cmp));</span><br><span class="line">    scanf(&quot;%d&quot;,&amp;T);</span><br><span class="line">    for(int i&#x3D;0; i&lt;T; i++) &#123;</span><br><span class="line">        scanf(&quot;%s&quot;,str[i]);</span><br><span class="line">        fcnt[i]&#x3D;lcnt[i]&#x3D;0;</span><br><span class="line">    &#125;</span><br><span class="line">    for(int i&#x3D;0; i&lt;T; i++) &#123;</span><br><span class="line">        for(int j&#x3D;0; str[i][j]!&#x3D;&#39;\0&#39;; j++) &#123;</span><br><span class="line">            if((str[i][j]&lt;&#39;A&#39;||str[i][j]&gt;&#39;Z&#39;)&amp;&amp;(str[i][j]!&#x3D;&#39;-&#39;&amp;&amp;str[i][j]!&#x3D;&#39;&gt;&#39;)&amp;&amp;str[i][j]!&#x3D;&#39;|&#39;)</span><br><span class="line">                fin[cnt++]&#x3D;str[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    fin[cnt++]&#x3D;&#39;#&#39;;</span><br><span class="line">    fin[cnt]&#x3D;&#39;\0&#39;;</span><br><span class="line">    printf(&quot;输出文法的Firstvt集和Lastvt集\n&quot;);</span><br><span class="line">    output_firstvt(T);</span><br><span class="line">    output_lastvt(T);</span><br><span class="line">    printf(&quot;输出算符优先关系表\n&quot;);</span><br><span class="line">    get_table(T,cnt);</span><br><span class="line">    printf(&quot;请输入输入串\n&quot;);</span><br><span class="line">    scanf(&quot;%s&quot;,st);</span><br><span class="line">    printf(&quot;输出输入串的分析过程\n&quot;);</span><br><span class="line">    printf(&quot;PS:分析过程每一列从左到右依次是：步骤 栈 有限关系 当前符号 剩余输入串 移进或规约\n\n&quot;);</span><br><span class="line">    get_process(st);</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>2<br>T-&gt;T,S|S<br>S-&gt;a|@|(T)<br>(a,a)#</p>
</blockquote>
<blockquote>
<p>3<br>B-&gt;BoT|T<br>T-&gt;TaF|F<br>F-&gt;nF|(B)|t|f<br>ntofat#</p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>词法分析器</title>
    <url>/2020/03/01/%E8%AF%8D%E6%B3%95%E5%88%86%E6%9E%90%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>词法分析器</p>
</blockquote>
<a id="more"></a>
<blockquote>
<p>词法分析器功能是输入源程序，按照构词规则分解成一系列单词符号。<br>单词是语言中具有独立意义最小单位，包括关键字、标识符、运算符、界符和常量等。<br>编制词法分析器。<br>输出单词符号表示成二元式：(单词种别，单词符号的属性值)。单词种别通常用整数编码。<br>标识符一般统归为一种。常数则宜按类型（整、实、布尔等）分种。关键字可将其全体视为一种。运算符可采用一符一种的方法。界符一般用一符一种的方法。</p>
</blockquote>
<blockquote>
<p>Source code:</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">#define MAX 10</span><br><span class="line">&#x2F;*</span><br><span class="line">    保留字|关键字：1</span><br><span class="line">    操作符|运算符：2</span><br><span class="line">    分界符：3</span><br><span class="line">    标识符：4</span><br><span class="line">    常数：5</span><br><span class="line">    无识别：6</span><br><span class="line">*&#x2F;</span><br><span class="line">char ch &#x3D; &#39; &#39;;</span><br><span class="line">char* keyWord[10] &#x3D; &#123;&quot;int&quot;,&quot;main&quot;,&quot;break&quot;,&quot;include&quot;,&quot;begin&quot;,&quot;end&quot;,&quot;if&quot;,&quot;else&quot;,&quot;while&quot;,&quot;switch&quot;&#125;;</span><br><span class="line">char token[20];&#x2F;&#x2F;定义获取的字符</span><br><span class="line">&#x2F;&#x2F;判断是否是关键字</span><br><span class="line">bool isKey(char *token)</span><br><span class="line">&#123;</span><br><span class="line">    for(int i &#x3D; 0;i &lt; MAX;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        if(strcmp(token,keyWord[i]) &#x3D;&#x3D; 0)</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;判断是否是字母</span><br><span class="line">bool isLetter(char letter)</span><br><span class="line">&#123;</span><br><span class="line">    if((letter &gt;&#x3D; &#39;a&#39; &amp;&amp; letter &lt;&#x3D; &#39;z&#39;)||(letter &gt;&#x3D; &#39;A&#39; &amp;&amp; letter &lt;&#x3D; &#39;Z&#39;))</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;判断是否是数字</span><br><span class="line">bool isDigit(char digit)</span><br><span class="line">&#123;</span><br><span class="line">    if(digit &gt;&#x3D; &#39;0&#39; &amp;&amp; digit &lt;&#x3D; &#39;9&#39;)</span><br><span class="line">        return true;</span><br><span class="line">    else</span><br><span class="line">        return false;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;&#x2F;词法分析</span><br><span class="line">void analyze(FILE *fpin)</span><br><span class="line">&#123;</span><br><span class="line">     </span><br><span class="line">    while((ch &#x3D; fgetc(fpin)) !&#x3D; EOF)&#123;</span><br><span class="line">        if(ch &#x3D;&#x3D; &#39; &#39;||ch &#x3D;&#x3D; &#39;\t&#39;||ch &#x3D;&#x3D; &#39;\n&#39;)&#123;&#125;</span><br><span class="line">        else if(isLetter(ch))&#123;</span><br><span class="line">            char token[20]&#x3D;&#123;&#39;\0&#39;&#125;;</span><br><span class="line">            int i&#x3D;0;</span><br><span class="line">            while(isLetter(ch)||isDigit(ch))&#123;  </span><br><span class="line">                token[i] &#x3D; ch;</span><br><span class="line">                i++;</span><br><span class="line">                ch &#x3D; fgetc(fpin);</span><br><span class="line">            &#125;</span><br><span class="line">            &#x2F;&#x2F;回退一个指针</span><br><span class="line">            fseek(fpin,-1L,SEEK_CUR);</span><br><span class="line">            if(isKey(token))&#123;</span><br><span class="line">                &#x2F;&#x2F;关键字</span><br><span class="line">                cout&lt;&lt;token&lt;&lt;&quot;\t1&quot;&lt;&lt;&quot;\t关键字&quot;&lt;&lt;endl;</span><br><span class="line">            &#125;</span><br><span class="line">            else&#123;</span><br><span class="line">                &#x2F;&#x2F;标识符</span><br><span class="line">                cout&lt;&lt;token&lt;&lt;&quot;\t4&quot;&lt;&lt;&quot;\t标识符&quot;&lt;&lt;endl;     </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        else if(isDigit(ch)||(ch &#x3D;&#x3D; &#39;.&#39;))</span><br><span class="line">        &#123;</span><br><span class="line">            int i&#x3D;0;</span><br><span class="line">            char token[20]&#x3D;&#123;&#39;\0&#39;&#125;;</span><br><span class="line">            while(isDigit(ch)||(ch &#x3D;&#x3D; &#39;.&#39;&amp;&amp;isDigit(fgetc(fpin))))</span><br><span class="line">            &#123;</span><br><span class="line">                if(ch &#x3D;&#x3D; &#39;.&#39;)fseek(fpin,-1L,SEEK_CUR);</span><br><span class="line">                token[i] &#x3D; ch;</span><br><span class="line">                i++;</span><br><span class="line">                ch &#x3D; fgetc(fpin);</span><br><span class="line">            &#125;</span><br><span class="line">            fseek(fpin,-1L,SEEK_CUR);</span><br><span class="line">            &#x2F;&#x2F;属于无符号常数</span><br><span class="line">            cout&lt;&lt;token&lt;&lt;&quot;\t5&quot;&lt;&lt;&quot;\t常数&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">        else switch(ch)&#123;</span><br><span class="line">            &#x2F;&#x2F;运算符</span><br><span class="line">            case &#39;+&#39;:&#123;</span><br><span class="line">                        ch &#x3D; fgetc(fpin);</span><br><span class="line">                        if(ch &#x3D;&#x3D; &#39;+&#39;)cout&lt;&lt;&quot;++&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            cout&lt;&lt;&quot;+&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                            fseek(fpin,-1L,SEEK_CUR);</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;break;</span><br><span class="line">            case &#39;-&#39;:&#123;</span><br><span class="line">                        ch &#x3D; fgetc(fpin);</span><br><span class="line">                        if(ch &#x3D;&#x3D; &#39;-&#39;)cout&lt;&lt;&quot;--&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            cout&lt;&lt;&quot;-&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                            fseek(fpin,-1L,SEEK_CUR);</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;break;</span><br><span class="line">            case &#39;*&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;break;</span><br><span class="line">            case &#39;&#x2F;&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;break;</span><br><span class="line">            &#x2F;&#x2F;分界符</span><br><span class="line">            case &#39;(&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t3&quot;&lt;&lt;&quot;\t分界符&quot;&lt;&lt;endl;break;</span><br><span class="line">            case &#39;)&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t3&quot;&lt;&lt;&quot;\t分界符&quot;&lt;&lt;endl;break;</span><br><span class="line">            case &#39;[&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t3&quot;&lt;&lt;&quot;\t分界符&quot;&lt;&lt;endl;break;</span><br><span class="line">            case &#39;]&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t3&quot;&lt;&lt;&quot;\t分界符&quot;&lt;&lt;endl;break;</span><br><span class="line">            case &#39;;&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t3&quot;&lt;&lt;&quot;\t分界符&quot;&lt;&lt;endl;break;</span><br><span class="line">            case &#39;&#123;&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t3&quot;&lt;&lt;&quot;\t分界符&quot;&lt;&lt;endl;break;</span><br><span class="line">            case &#39;&#125;&#39;:cout&lt;&lt;ch&lt;&lt;&quot;\t3&quot;&lt;&lt;&quot;\t分界符&quot;&lt;&lt;endl;break;</span><br><span class="line">            &#x2F;&#x2F;运算符</span><br><span class="line">            case &#39;&#x3D;&#39;:&#123;</span><br><span class="line">                        ch &#x3D; fgetc(fpin);</span><br><span class="line">                        if(ch &#x3D;&#x3D; &#39;&#x3D;&#39;)cout&lt;&lt;&quot;&#x3D;&#x3D;&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            cout&lt;&lt;&quot;&#x3D;&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                            fseek(fpin,-1L,SEEK_CUR);</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;break;</span><br><span class="line">           </span><br><span class="line">case &#39;&lt;&#39;:&#123;</span><br><span class="line">                        ch &#x3D; fgetc(fpin);</span><br><span class="line">                        if(ch &#x3D;&#x3D; &#39;&#x3D;&#39;)cout&lt;&lt;&quot;&lt;&#x3D;&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                        else &#123;</span><br><span class="line">                            cout&lt;&lt;&quot;&lt;&quot;&lt;&lt;&quot;\t2&quot;&lt;&lt;&quot;\t运算符&quot;&lt;&lt;endl;</span><br><span class="line">                            fseek(fpin,-1L,SEEK_CUR);</span><br><span class="line">                        &#125;</span><br><span class="line">                     &#125;break;</span><br><span class="line">            &#x2F;&#x2F;无识别</span><br><span class="line">            default: cout&lt;&lt;ch&lt;&lt;&quot;\t6&quot;&lt;&lt;&quot;\t无识别符&quot;&lt;&lt;endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    char input[30];</span><br><span class="line">    FILE *fpin;</span><br><span class="line">    cout&lt;&lt;&quot;请输入源文件名：\n&quot;&lt;&lt;endl;</span><br><span class="line">    for(;;)&#123;</span><br><span class="line">        cin&gt;&gt;input;</span><br><span class="line">        if((fpin &#x3D; fopen(input,&quot;r&quot;)) !&#x3D; NULL)</span><br><span class="line">            break;</span><br><span class="line">        else</span><br><span class="line">            cout&lt;&lt;&quot;路径输入错误&quot;&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;&quot;****************词法分析结果********************&quot;&lt;&lt;endl;</span><br><span class="line">    analyze(fpin);</span><br><span class="line">    fclose(fpin);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<blockquote>
<p>单词符号    种别码<br>关键字    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;1<br>运算符    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;2<br>分界符    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;3<br>标识符    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;4<br>常数    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;5<br>无法识别&nbsp;    &nbsp;6</p>
</blockquote>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C++</tag>
        <tag>编译原理</tag>
      </tags>
  </entry>
  <entry>
    <title>文件复制</title>
    <url>/2020/03/01/%E6%96%87%E4%BB%B6%E5%A4%8D%E5%88%B6/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import java.io.*;</span><br><span class="line">public class FileStream &#123;</span><br><span class="line">	public  static void  copy(String filename1,String filename2) &#123;</span><br><span class="line">		try &#123;</span><br><span class="line">			FileInputStream fin &#x3D; new FileInputStream(filename1);</span><br><span class="line">			FileOutputStream fout &#x3D; new FileOutputStream(filename2);</span><br><span class="line">			byte buffer[]&#x3D;new byte[512];</span><br><span class="line">			int count&#x3D;0;</span><br><span class="line">			while((count&#x3D;fin.read(buffer))!&#x3D;-1)</span><br><span class="line">				fout.write(buffer,0,count);</span><br><span class="line">			fin.close();</span><br><span class="line">			fout.close();</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">		catch (FileNotFoundException ex) &#123;</span><br><span class="line">			System.out.println(filename1+&quot;文件不存在，不能复制&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		catch (IOException ex)&#123;</span><br><span class="line">			System.out.println(&quot;IO异常，复制&quot;+filename1+&quot;文件未成功&quot;);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(&quot;文件复制成功！&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	public static void main(String[] args) &#123;</span><br><span class="line">		</span><br><span class="line">		&#x2F;&#x2F; TODO 自动生成的方法存根</span><br><span class="line">		</span><br><span class="line">		File f1&#x3D;new File(&quot;E:&quot;+File.separator+&quot;java文件&quot;+File.separator+&quot;试验九&quot;+File.separator+&quot;abc.txt&quot;);</span><br><span class="line">		</span><br><span class="line">		File f2&#x3D;new File(&quot;E:&quot;+File.separator+&quot;java文件&quot;+File.separator+&quot;试验九&quot;+File.separator+&quot;cba.txt&quot;);</span><br><span class="line">		FileStream.copy(&quot;E:&quot;+File.separator+&quot;java文件&quot;+File.separator+&quot;试验九&quot;+File.separator+&quot;abc.txt&quot;, &quot;E:&quot;+File.separator+&quot;java文件&quot;+File.separator+&quot;试验九&quot;+File.separator+&quot;cba.txt&quot;);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>用户账户线程管理</title>
    <url>/2020/03/01/%E7%94%A8%E6%88%B7%E8%B4%A6%E6%88%B7%E7%BA%BF%E7%A8%8B%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">public class Account &#123;</span><br><span class="line">	String name;</span><br><span class="line">	double balance;</span><br><span class="line">	public Account(String name) &#123;</span><br><span class="line">		this.name&#x3D;name;</span><br><span class="line">		this.balance&#x3D;0;</span><br><span class="line">	&#125;</span><br><span class="line">	public void put(double value) &#123;</span><br><span class="line">		if(value&gt;0)</span><br><span class="line">			this.balance+&#x3D;value;</span><br><span class="line">	&#125;</span><br><span class="line">	public double get(double value) &#123;</span><br><span class="line">		if(value&lt;&#x3D;0)</span><br><span class="line">			return 0;</span><br><span class="line">		if(value&lt;&#x3D;this.balance)</span><br><span class="line">			this.balance-&#x3D;value;</span><br><span class="line">		else &#123;</span><br><span class="line">			value&#x3D;this.balance;</span><br><span class="line">			this.balance&#x3D;0;</span><br><span class="line">		&#125;</span><br><span class="line">		return value;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class SaveLock extends Thread &#123;</span><br><span class="line">	private Account account;</span><br><span class="line">	private double value;</span><br><span class="line">	public SaveLock(Account account,double value) &#123;</span><br><span class="line">		this.account&#x3D;account;</span><br><span class="line">		this.value&#x3D;value;</span><br><span class="line">	&#125;</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		synchronized(this.account) &#123;</span><br><span class="line">			double howmatch&#x3D;this.account.balance;</span><br><span class="line">			try &#123;Thread.sleep(1);</span><br><span class="line">		&#125;</span><br><span class="line">			catch(InterruptedException ex) &#123;&#125;</span><br><span class="line">			this.account.put(this.value);</span><br><span class="line">			System.out.println(this.account.name+&quot;账户：现有&quot;+howmatch+&quot;,存入&quot;+this.value+&quot;,余额&quot;+this.account.balance);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">class FetchLock extends Thread&#123;</span><br><span class="line">	private Account account;</span><br><span class="line">	private double value;</span><br><span class="line">	public FetchLock(Account account,double value) &#123;</span><br><span class="line">		this.account&#x3D;account;</span><br><span class="line">		this.value&#x3D;value;</span><br><span class="line">	&#125;</span><br><span class="line">	public void run() &#123;</span><br><span class="line">		synchronized(this.account) &#123;</span><br><span class="line">			double howmatch &#x3D; this.account.balance;</span><br><span class="line">			try &#123;</span><br><span class="line">				Thread.sleep(1);</span><br><span class="line">			&#125;</span><br><span class="line">			catch(InterruptedException ex) &#123;&#125;</span><br><span class="line">			System.out.println( this.account.name+&quot;账户：现有&quot;+howmatch+&quot;，取走&quot;+this.account.get(this.value)+&quot;，余额&quot;+this.account.balance);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">public class Main &#123;</span><br><span class="line"></span><br><span class="line">	public static void main(String args[]) &#123;</span><br><span class="line">		Account wang &#x3D; new Account(&quot;Wang&quot;);</span><br><span class="line">		(new SaveLock(wang,100)).start();</span><br><span class="line">		(new SaveLock(wang,200)).start();</span><br><span class="line">		(new FetchLock(wang,300)).start();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>员工工资管理系统</title>
    <url>/2020/03/01/%E5%91%98%E5%B7%A5%E5%B7%A5%E8%B5%84%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int mmyz()</span><br><span class="line">&#123;</span><br><span class="line">	int i,n&#x3D;0,j;</span><br><span class="line">	char k[6];</span><br><span class="line">	char h[]&#x3D;&#123;&quot;123456&quot;&#125;;</span><br><span class="line">	cout&lt;&lt;&quot;请输入系统的6位初始密码&quot;&lt;&lt;endl;</span><br><span class="line">	for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	for(j&#x3D;0;j&lt;6;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		k[j]&#x3D;getch();</span><br><span class="line">		cout&lt;&lt;&quot;*&quot;;</span><br><span class="line">	&#125;</span><br><span class="line">	if(strcmp(k,h)&#x3D;&#x3D;0)	</span><br><span class="line">		&#123;</span><br><span class="line">			cout&lt;&lt;&quot;密码正确\n&quot;&lt;&lt;endl;</span><br><span class="line">			cout&lt;&lt;&quot;成功进入系统&quot;&lt;&lt;endl;</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;\n密码错误，请重新输入\n&quot;);</span><br><span class="line">			n++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		if(n&#x3D;&#x3D;3)</span><br><span class="line">		&#123;</span><br><span class="line">		printf(&quot;禁止登陆！\n&quot;);break;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return(n);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class company&#123;</span><br><span class="line">	public:</span><br><span class="line">		int num;</span><br><span class="line">		string name;</span><br><span class="line">		int basicwage;</span><br><span class="line">		int postwage;  &#x2F;&#x2F;岗位工资</span><br><span class="line">		int bonus;   &#x2F;&#x2F;奖金</span><br><span class="line">		int salary;  &#x2F;&#x2F;应发工资</span><br><span class="line">		int funds;   &#x2F;&#x2F;公积金 </span><br><span class="line">		float deduthetax; &#x2F;&#x2F;税收 </span><br><span class="line">		float  thp;  &#x2F;&#x2F;实发工资</span><br><span class="line">		company()&#123;&#125;;</span><br><span class="line">		company(int n,string na,int ba,int po,int bo,int sa,int f,float de,float th):num(n),name(na),basicwage(ba),postwage(po),bonus(bo),salary(sa),funds(f),deduthetax(de),thp(th)&#123;&#125;	  </span><br><span class="line">		void setdata();</span><br><span class="line">	    void display();</span><br><span class="line">	    friend void add(company &amp;stu,int a);</span><br><span class="line">&#125;; </span><br><span class="line">void company::display()&#123;</span><br><span class="line">	cout&lt;&lt;&quot;工号:&quot;&lt;&lt;num&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;姓名:&quot;&lt;&lt;name&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;基本工资:&quot;&lt;&lt;basicwage&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;岗位工资:&quot;&lt;&lt;postwage&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;奖金:&quot;&lt;&lt;bonus&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;应发工资:&quot;&lt;&lt;salary&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;公积金:&quot;&lt;&lt;funds&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;税收:&quot;&lt;&lt;deduthetax&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;实发工资:&quot;&lt;&lt;thp&lt;&lt;endl;</span><br><span class="line">&#125; </span><br><span class="line">void add(company *stu,int a)&#123;</span><br><span class="line">	int b,i;</span><br><span class="line">	cout&lt;&lt;&quot;请输入插入个数&quot;&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;b; </span><br><span class="line">	cout&lt;&lt;&quot;输入插入数据:&quot;&lt;&lt;endl; </span><br><span class="line">	for(i&#x3D;a;i&lt;a+b;i++)&#123;</span><br><span class="line">	stu[i].setdata();</span><br><span class="line">    &#125;</span><br><span class="line">    a&#x3D;a+b;</span><br><span class="line">&#125;</span><br><span class="line">void change(company *stu,int a)&#123;</span><br><span class="line">	int c,i;</span><br><span class="line">	  cout&lt;&lt;&quot;输入要修改的员工编号&quot;&lt;&lt;endl;</span><br><span class="line">	  cin&gt;&gt;c;</span><br><span class="line">	  cout&lt;&lt;&quot;输入要修改后员工数据&quot;&lt;&lt;endl; </span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;c)&#123;</span><br><span class="line">	  		stu[i].setdata();</span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void delet(company *stu,int a)&#123;</span><br><span class="line">int d,i;</span><br><span class="line">	  cout&lt;&lt;&quot;输入要删除的员工编号&quot;&lt;&lt;endl;</span><br><span class="line">	  cin&gt;&gt;d; </span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;d)&#123;</span><br><span class="line">	  		for(;i&lt;a;i++)&#123;</span><br><span class="line">	  			stu[i]&#x3D;stu[i+1];</span><br><span class="line">			  &#125;</span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	a&#x3D;a-1;	</span><br><span class="line">&#125;</span><br><span class="line">void sum(company *stu,int a)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	int e&#x3D;0;    &#x2F;&#x2F;员工总工资 </span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  e&#x3D;e+stu[i].thp;	</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;&quot;员工总工资为:&quot; &lt;&lt;e&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">void search(company *stu,int a)&#123;</span><br><span class="line">	int f,i;</span><br><span class="line">	  cout&lt;&lt;&quot;输入要查询的员工编号&quot;&lt;&lt;endl;</span><br><span class="line">	  cin&gt;&gt;f; </span><br><span class="line">	  for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">	  	if(stu[i].num&#x3D;&#x3D;f)&#123;</span><br><span class="line">	  		stu[i].display();</span><br><span class="line">		  &#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void sort(company *stu,int a)&#123;</span><br><span class="line">	int i,j;</span><br><span class="line">	float tmp;</span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">		for(j&#x3D;i+1;j&lt;a;j++)&#123;</span><br><span class="line">			if(stu[i].thp&gt;stu[j].thp)&#123;</span><br><span class="line">			     tmp&#x3D;stu[i].thp;</span><br><span class="line">			     stu[i].thp&#x3D;stu[j].thp;</span><br><span class="line">			     stu[j].thp&#x3D;tmp;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void outpu(company *stu,int a)&#123;</span><br><span class="line">	int i;</span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">		stu[i].display();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void company::setdata()&#123;</span><br><span class="line">	cin&gt;&gt;num;</span><br><span class="line">	cin&gt;&gt;name;</span><br><span class="line">	cin&gt;&gt;basicwage;</span><br><span class="line">	cin&gt;&gt;postwage;</span><br><span class="line">	cin&gt;&gt;bonus;</span><br><span class="line">	cin&gt;&gt;salary;</span><br><span class="line">	cin&gt;&gt;funds;</span><br><span class="line">	cin&gt;&gt;deduthetax;</span><br><span class="line">	cin&gt;&gt;thp;</span><br><span class="line">&#125;</span><br><span class="line">&#x2F;* run this program using the console pauser or add your own getch, system(&quot;pause&quot;) or input loop *&#x2F;</span><br><span class="line"></span><br><span class="line">int main(int argc, char** argv) &#123;</span><br><span class="line">	int z;</span><br><span class="line">	z&#x3D;mmyz();</span><br><span class="line">	if(z&#x3D;&#x3D;3)&#123;</span><br><span class="line">		return 0;</span><br><span class="line">	&#125;</span><br><span class="line">	int i;</span><br><span class="line">	int n; &#x2F;&#x2F;功能序号 </span><br><span class="line">	int a; &#x2F;&#x2F;输入员工个数 </span><br><span class="line">	company st[100];</span><br><span class="line">	company *stu&#x3D;st;</span><br><span class="line">	cout&lt;&lt;&quot;输入员工个数&quot;&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;a;</span><br><span class="line">	cout&lt;&lt;&quot;输入数据(编号，姓名，基本工资，岗位工资，奖励，应发工资，公积金，税收，实发工资)&quot;&lt;&lt;endl; </span><br><span class="line">	for(i&#x3D;0;i&lt;a;i++)&#123;</span><br><span class="line">		stu[i].setdata();</span><br><span class="line">		cout&lt;&lt;endl;</span><br><span class="line">	&#125;                     &#x2F;&#x2F;输入函数 </span><br><span class="line">	       cout&lt;&lt;&quot;1:添加 &quot; </span><br><span class="line">	                   &quot;2:修改 &quot; </span><br><span class="line">		   &quot;3:删除 &quot;</span><br><span class="line">		   &quot;4:统计 &quot;</span><br><span class="line">		   &quot;5:查询 &quot;</span><br><span class="line">		   &quot;6:按实发工资排序 &quot;</span><br><span class="line">		   &quot;7:输出 &quot; </span><br><span class="line">		   &quot;8:退出系统 &quot;;</span><br><span class="line">    cout&lt;&lt;endl;</span><br><span class="line">	cout&lt;&lt;&quot;输入功能号&quot;&lt;&lt;endl;</span><br><span class="line">	cin&gt;&gt;n;</span><br><span class="line">	while(n&gt;&#x3D;1&amp;&amp;n&lt;8)&#123;</span><br><span class="line">	if(n&#x3D;&#x3D;1)&#123;</span><br><span class="line">	 add(stu,a);  </span><br><span class="line">	 cout&lt;&lt;&quot;请输入功能号&quot;&lt;&lt;endl; </span><br><span class="line">	 cin&gt;&gt;n;</span><br><span class="line">	&#125;</span><br><span class="line">	if(n&#x3D;&#x3D;2)&#123;</span><br><span class="line">	  change(stu,a);</span><br><span class="line">	  cout&lt;&lt;&quot;请输入功能号&quot;&lt;&lt;endl; </span><br><span class="line">	 cin&gt;&gt;n;</span><br><span class="line">	  &#125;</span><br><span class="line">	   if(n&#x3D;&#x3D;3)&#123;</span><br><span class="line">	  delet(stu,a);</span><br><span class="line">	  cout&lt;&lt;&quot;请输入功能号&quot;&lt;&lt;endl; </span><br><span class="line">	  cin&gt;&gt;n;</span><br><span class="line">	  &#125;</span><br><span class="line">	  if(n&#x3D;&#x3D;4)&#123;</span><br><span class="line">	  sum(stu,a);</span><br><span class="line">	  cout&lt;&lt;&quot;请输入功能号&quot;&lt;&lt;endl; </span><br><span class="line">	  cin&gt;&gt;n;</span><br><span class="line">	  &#125; </span><br><span class="line">	  if(n&#x3D;&#x3D;5)&#123;</span><br><span class="line">	  search(stu,a);</span><br><span class="line">	  cout&lt;&lt;&quot;请输入功能号&quot;&lt;&lt;endl; </span><br><span class="line">	  cin&gt;&gt;n;</span><br><span class="line">	  &#125;</span><br><span class="line">	  if(n&#x3D;&#x3D;6)&#123;</span><br><span class="line">	  sort(stu,a);</span><br><span class="line">	  cout&lt;&lt;&quot;请输入功能号&quot;&lt;&lt;endl; </span><br><span class="line">	  cin&gt;&gt;n;	</span><br><span class="line">	  &#125;</span><br><span class="line">	  if(n&#x3D;&#x3D;7)&#123;</span><br><span class="line">	  outpu(stu,a);</span><br><span class="line">	  cout&lt;&lt;&quot;请输入功能号&quot;&lt;&lt;endl; </span><br><span class="line">	  cin&gt;&gt;n;</span><br><span class="line">	  &#125;  </span><br><span class="line">&#125;</span><br><span class="line">	</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>解一元二次方程</title>
    <url>/2020/03/01/%E8%A7%A3%E4%B8%80%E5%85%83%E4%BA%8C%E6%AC%A1%E6%96%B9%E7%A8%8B/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;math.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">class equation&#123;</span><br><span class="line">	private:</span><br><span class="line">		int a,b,c,d;</span><br><span class="line">		float x1,x2;</span><br><span class="line">	public:</span><br><span class="line">		void setdata();</span><br><span class="line">		void display();</span><br><span class="line">&#125;;</span><br><span class="line">void equation::setdata()&#123;</span><br><span class="line">	cin&gt;&gt;a&gt;&gt;b&gt;&gt;c;</span><br><span class="line">&#125;</span><br><span class="line">void equation::display()&#123;</span><br><span class="line">	d&#x3D;b*b-4*a*c;</span><br><span class="line">	if(d&gt;&#x3D;0)&#123;</span><br><span class="line">		x1&#x3D;(-b+sqrt(d))&#x2F;(2*a);</span><br><span class="line">		x2&#x3D;(-b-sqrt(d))&#x2F;(2*a);</span><br><span class="line">		cout&lt;&lt;&quot;x1&#x3D;&quot;&lt;&lt;x1&lt;&lt;endl&lt;&lt;&quot;x2&#x3D;&quot;&lt;&lt;x2&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line">	if(d&lt;0)&#123;</span><br><span class="line">		cout&lt;&lt;&quot;x1&#x3D;&quot;&lt;&lt;(-b)&#x2F;(2*a)&lt;&lt;&quot;+&quot;&lt;&lt;sqrt(-d)&#x2F;(2*a)&lt;&lt;&quot;i&quot;&lt;&lt;endl;</span><br><span class="line">		cout&lt;&lt;&quot;x2&#x3D;&quot;&lt;&lt;(-b)&#x2F;(2*a)&lt;&lt;&quot;-&quot;&lt;&lt;sqrt(-d)&#x2F;(2*a)&lt;&lt;&quot;i&quot;&lt;&lt;endl;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">	equation  e;</span><br><span class="line">	e.setdata();</span><br><span class="line">	e.display();</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C++</tag>
      </tags>
  </entry>
  <entry>
    <title>学生管理系统</title>
    <url>/2020/03/01/%E5%AD%A6%E7%94%9F%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include &lt;conio.h&gt;</span><br><span class="line">int a[60],xszs;</span><br><span class="line">int mmyz();</span><br><span class="line">void cddy();</span><br><span class="line">void lrxscj();</span><br><span class="line">void xsxscj();</span><br><span class="line">void tj();</span><br><span class="line">void maxmin();</span><br><span class="line">void tjfdrs();</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">	int c,d;</span><br><span class="line">	c&#x3D;mmyz();</span><br><span class="line">	if(c&#x3D;&#x3D;3)</span><br><span class="line">	printf(&quot;..........................\n&quot;);</span><br><span class="line">	else</span><br><span class="line">	&#123;</span><br><span class="line">		cddy();</span><br><span class="line">		for(;d!&#x3D;0;)</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;..........................\n&quot;);</span><br><span class="line">			printf(&quot;----请选择要操作的序号----\n&quot;);</span><br><span class="line">			scanf(&quot;%d&quot;,&amp;d);</span><br><span class="line">			if(d&#x3D;&#x3D;0)&#123;printf(&quot;退出\n&quot;);break;&#125;</span><br><span class="line">			else</span><br><span class="line">			&#123;</span><br><span class="line">				switch(d)</span><br><span class="line">				&#123;</span><br><span class="line">					case 1:lrxscj();break;</span><br><span class="line">					case 2:xsxscj();break;</span><br><span class="line">					case 3:tj();break;</span><br><span class="line">					case 4:maxmin();break;</span><br><span class="line">					case 5:tjfdrs();break;</span><br><span class="line">					</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">			</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line">int mmyz()</span><br><span class="line">&#123;</span><br><span class="line">	int i,n&#x3D;0,j;</span><br><span class="line">	char g[6],b[]&#x3D;&#123;&quot;123456&quot;&#125;;</span><br><span class="line">	printf(&quot;请输入系统的6位初始密码\n&quot;);</span><br><span class="line">	for(i&#x3D;0;i&lt;3;i++)</span><br><span class="line">	&#123;</span><br><span class="line">	for(j&#x3D;0;j&lt;6;j++)</span><br><span class="line">	&#123;</span><br><span class="line">		g[j]&#x3D;getch();</span><br><span class="line">		printf(&quot;*&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">	if(strcmp(g,b)&#x3D;&#x3D;0)	</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;密码正确\n&quot;);</span><br><span class="line">			printf(&quot;成功进入系统\n&quot;);</span><br><span class="line">			break;</span><br><span class="line">		&#125;</span><br><span class="line">		else</span><br><span class="line">		&#123;</span><br><span class="line">			printf(&quot;密码错误，请重新输入\n&quot;);</span><br><span class="line">			n++;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		if(n&#x3D;&#x3D;3)</span><br><span class="line">		&#123;</span><br><span class="line">		printf(&quot;禁止登陆！\n&quot;);break;&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return(n);</span><br><span class="line">&#125;</span><br><span class="line">void cddy()</span><br><span class="line">&#123;</span><br><span class="line">	printf(&quot;--------------------\n&quot;);</span><br><span class="line">	printf(&quot;- 1 录入学生成绩   -\n&quot;);</span><br><span class="line">	printf(&quot;- 2 显示学生成绩   -\n&quot;);</span><br><span class="line">	printf(&quot;- 3 统计总分平均分 -\n&quot;);</span><br><span class="line">	printf(&quot;- 4 最高分与最低分 -\n&quot;);</span><br><span class="line">	printf(&quot;- 5 统计各分段人数 -\n&quot;);</span><br><span class="line">	printf(&quot;- 0 退出           -\n&quot;);</span><br><span class="line">	printf(&quot;-请选择要操作的序号-\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">void lrxscj()</span><br><span class="line">&#123;</span><br><span class="line">	int i;</span><br><span class="line">	printf(&quot;请输入学生成绩（-1表示录入结束）\n&quot;);</span><br><span class="line">	for(i&#x3D;0;;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;a[i]);</span><br><span class="line">		if(a[i]&#x3D;&#x3D;-1) break;</span><br><span class="line">	 &#125;</span><br><span class="line">	 xszs&#x3D;i;</span><br><span class="line">&#125;</span><br><span class="line">void xsxscj()</span><br><span class="line">&#123;</span><br><span class="line">	int i,j,k;</span><br><span class="line">	for(i&#x3D;0;i&lt;xszs-1;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		for(j&#x3D;0;j&lt;&#x3D;xszs-1;j++)</span><br><span class="line">		&#123;</span><br><span class="line">			if(a[j]&lt;a[j+1])</span><br><span class="line">			&#123;</span><br><span class="line">				k&#x3D;a[j];</span><br><span class="line">				a[j]&#x3D;a[j+1];</span><br><span class="line">				a[j+1]&#x3D;k;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	for(i&#x3D;0;i&lt;xszs;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		printf(&quot;%d\t&quot;,a[i]);</span><br><span class="line">		if(a[i]&#x3D;&#x3D;a[i-1])</span><br><span class="line">		printf(&quot;第%d名\n&quot;,i);</span><br><span class="line">		else</span><br><span class="line">		printf(&quot;第%d名\n&quot;,i+1);</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">void tj()</span><br><span class="line">&#123;</span><br><span class="line">	int i,sum&#x3D;0;</span><br><span class="line">	for(i&#x3D;0;i&lt;xszs;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		sum&#x3D;sum+a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;总分%d\t&quot;,sum);</span><br><span class="line">	printf(&quot;平均分%d\n&quot;,sum&#x2F;xszs); </span><br><span class="line">&#125;</span><br><span class="line">void maxmin()</span><br><span class="line">&#123;</span><br><span class="line">	int max,min,i;</span><br><span class="line">	max&#x3D;a[0];min&#x3D;a[0];</span><br><span class="line">	for(i&#x3D;0;i&lt;xszs;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(a[i]&gt;max)</span><br><span class="line">		max&#x3D;a[i];</span><br><span class="line">		else</span><br><span class="line">		if(a[i]&lt;min)</span><br><span class="line">		min&#x3D;a[i];</span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;最高分为%d\t最低分为%d\n&quot;,max,min); </span><br><span class="line">&#125;</span><br><span class="line">void tjfdrs()</span><br><span class="line">&#123;</span><br><span class="line">	int i,n,c1&#x3D;0,c2&#x3D;0,c3&#x3D;0,c4&#x3D;0,c5&#x3D;0;</span><br><span class="line">	for(i&#x3D;0;i&lt;xszs;i++)</span><br><span class="line">	&#123;</span><br><span class="line">		if(a[i]&gt;&#x3D;90)</span><br><span class="line">		c1++;</span><br><span class="line">		else</span><br><span class="line">		if(a[i]&gt;&#x3D;80)</span><br><span class="line">		c2++;</span><br><span class="line">		else</span><br><span class="line">		if(a[i]&gt;&#x3D;70)</span><br><span class="line">		c3++;</span><br><span class="line">		else</span><br><span class="line">		if(a[i]&gt;&#x3D;60)</span><br><span class="line">		c4++;</span><br><span class="line">		else</span><br><span class="line">		c5++; </span><br><span class="line">	&#125;</span><br><span class="line">	printf(&quot;优秀：%d\n良：%d\n中：%d\n合格：%d\n不合格：%d\n&quot;,c1,c2,c3,c4,c5);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>猜数游戏</title>
    <url>/2020/03/01/%E7%8C%9C%E6%95%B0%E6%B8%B8%E6%88%8F/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include &lt;stdio.h&gt; </span><br><span class="line">#include &lt;time.h&gt; </span><br><span class="line">#include &lt;stdlib.h&gt; </span><br><span class="line">#include &lt;string.h&gt; </span><br><span class="line">main () </span><br><span class="line">&#123; </span><br><span class="line">     int data,count,goal; </span><br><span class="line">      while( 1 ) </span><br><span class="line">    &#123; </span><br><span class="line">srand(time(0));</span><br><span class="line">   goal&#x3D;rand() %100; </span><br><span class="line">   count&#x3D;0; </span><br><span class="line">   </span><br><span class="line">	    printf (&quot;欢迎进入猜数游戏！&quot;);</span><br><span class="line">        printf(&quot;请输入你猜的数字！\n&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;data); </span><br><span class="line">           while(data!&#x3D;goal) </span><br><span class="line">&#123; </span><br><span class="line">        if (data&gt;goal) </span><br><span class="line">        &#123; </span><br><span class="line">                printf(&quot;您猜的数有些大，请耐心重输入！\n&quot;); </span><br><span class="line">            count++; </span><br><span class="line">        &#125; </span><br><span class="line">        else </span><br><span class="line">        &#123; </span><br><span class="line">                printf(&quot;您猜的数有些小，请耐心重输入！\n&quot;); </span><br><span class="line">                  count++; </span><br><span class="line">        &#125; </span><br><span class="line">        scanf(&quot;%d&quot;,&amp;data); </span><br><span class="line">        &#125;</span><br><span class="line">		printf(&quot;真聪明，祝贺！&quot;); </span><br><span class="line">        printf(&quot;您猜的次数： %d\n&quot;,count); </span><br><span class="line">   </span><br><span class="line">	 </span><br><span class="line">	 &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>简易计算器</title>
    <url>/2020/03/01/%E7%94%A8C%E8%AF%AD%E8%A8%80%E7%BC%96%E5%86%99%E7%AE%80%E6%98%93%E8%AE%A1%E7%AE%97%E5%99%A8/</url>
    <content><![CDATA[<blockquote>
<p>Source code:</p>
</blockquote>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;time.h&gt;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">   float a,b,sum,sub,mul,div;</span><br><span class="line">   int c,i&#x3D;1;</span><br><span class="line">    while(i&#x3D;&#x3D;1)</span><br><span class="line">	&#123;</span><br><span class="line">		srand(time(NULL));</span><br><span class="line">		a&#x3D;rand();</span><br><span class="line">		b&#x3D;rand();</span><br><span class="line">		printf(&quot;\t|-------------------|\n&quot;);</span><br><span class="line">		printf(&quot;\t|     实用计算器    |\n&quot;);</span><br><span class="line">		printf(&quot;\t|-------------------|\n&quot;);</span><br><span class="line">		printf(&quot;\t|     1---加法      |\n&quot;);</span><br><span class="line">		printf(&quot;\t|     2---减法      |\n&quot;);  </span><br><span class="line">		printf(&quot;\t|     3---乘法      |\n&quot;); </span><br><span class="line">		printf(&quot;\t|     4---除法      |\n&quot;); </span><br><span class="line">		printf(&quot;\t|     0---退出      |\n&quot;); </span><br><span class="line">		printf(&quot;\t|-------------------|\n&quot;);</span><br><span class="line">		printf(&quot;请输入数字选择：\n&quot;);</span><br><span class="line">		scanf(&quot;%d&quot;,&amp;c);</span><br><span class="line">		if(c&#x3D;&#x3D;0)</span><br><span class="line">		break;</span><br><span class="line">		switch(c)</span><br><span class="line">		&#123;</span><br><span class="line">			case 1:sum&#x3D;a+b;printf(&quot;%.2f+%.2f&#x3D;%.2f\n\n\n\n&quot;,a,b,sum);break;</span><br><span class="line">			case 2:sub&#x3D;a-b;printf(&quot;%.2f-%.2f&#x3D;%.2f\n\n\n\n&quot;,a,b,sub);break;</span><br><span class="line">			case 3:mul&#x3D;a*b;printf(&quot;%.2f*%.2f&#x3D;%.2f\n\n\n\n&quot;,a,b,mul);break;</span><br><span class="line">			case 4:div&#x3D;a&#x2F;b;printf(&quot;%.2f&#x2F;%.2f&#x3D;%.2f\n\n\n\n&quot;,a,b,div);break;</span><br><span class="line">		 &#125; </span><br><span class="line">		 &#125; 	</span><br><span class="line">		 return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Code</category>
      </categories>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>First post</title>
    <url>/2020/02/29/First%20post/</url>
    <content><![CDATA[<blockquote>
<p>Hello World!</p>
</blockquote>
]]></content>
      <categories>
        <category>Experience</category>
      </categories>
      <tags>
        <tag>Experience</tag>
      </tags>
  </entry>
</search>
